{"searchDocs":[{"title":"Event tracking","type":0,"sectionRef":"#","url":"/sdk-android/event-tracking","content":"","keywords":"","version":null},{"title":"Attributes​","type":1,"pageTitle":"Event tracking","url":"/sdk-android/event-tracking#attributes","content":" In order to bring context to your event handling, some properties can be added to the event.  Requirements:  Property names must be limited to 128 charactersNo more than 1000 attributesSupported types for values: string, number (Int, Long, Double), boolean and Date.  // trigger custom event Screeb.trackEvent(&quot;Product added to cart&quot;, TrackingEventProperties().apply { this[&quot;product_name&quot;] = &quot;Red bike 2021&quot; this[&quot;category&quot;] = &quot;sport&quot; this[&quot;price&quot;] = 12.29 this[&quot;count&quot;] = 1 this[&quot;delivery_method&quot;] = &quot;UPS&quot; this[&quot;user_logged&quot;] = false this[&quot;added_at&quot;] = Date() })  ","version":null,"tagName":"h2"},{"title":"NPM packages","type":0,"sectionRef":"#","url":"/npm-packages","content":"","keywords":"","version":null},{"title":"How to add the Screeb tag to your app?​","type":1,"pageTitle":"NPM packages","url":"/npm-packages#how-to-add-the-screeb-tag-to-your-app","content":" First, log in to the Screeb application, then create your first survey.  When your survey is ready to share, you can choose between our javascript npm packages:  Screeb for browserScreeb for ReactScreeb for Angular  ","version":null,"tagName":"h2"},{"title":"Next steps​","type":1,"pageTitle":"NPM packages","url":"/npm-packages#next-steps","content":" ","version":null,"tagName":"h2"},{"title":"2- Read READMEs for the package you choose​","type":1,"pageTitle":"NPM packages","url":"/npm-packages#2--read-readmes-for-the-package-you-choose","content":" Screeb for browser READMEScreeb for React READMEScreeb for Angular README  ","version":null,"tagName":"h3"},{"title":"3- Take a look at example apps for the package you choose​","type":1,"pageTitle":"NPM packages","url":"/npm-packages#3--take-a-look-at-example-apps-for-the-package-you-choose","content":" Screeb for browser - example appScreeb for React - example appScreeb for Angular - example app ","version":null,"tagName":"h3"},{"title":"Stitch v2.0.0","type":0,"sectionRef":"#","url":"/api-and-connectors/stitch-v2.0.0","content":"","keywords":"","version":null},{"title":"Entities​","type":1,"pageTitle":"Stitch v2.0.0","url":"/api-and-connectors/stitch-v2.0.0#entities","content":" Organization: A Screeb account, shared by many Screeb users of your companyChannel: A distribution channel for your survey (Javascript SDK, Android SDK, iOS SDK...)SurveySurvey scenario: A versioned survey: on survey update, your flow is saved in a new scenario. New users will see the last scenario.User: Information about the visitorResponse: A response is a chain of question+answers. A user sometimes has many responses to a single survey.QuestionAnswer: An answer is part of a response. Each answer is associated with a question.Field: An answer may have many fields (eg: multiple choices question)  ","version":null,"tagName":"h2"},{"title":"Hook types​","type":1,"pageTitle":"Stitch v2.0.0","url":"/api-and-connectors/stitch-v2.0.0#hook-types","content":" You can send 3 different event types into your datawarehouse:  On survey display: a survey is shown to visitors, but no question is replied. You will get notified even if no response is given.On question answered: a question has been replied. This webhook will be triggered for each question of a single survey.On response end: a survey has been closed or fully replied to by the user.  ","version":null,"tagName":"h2"},{"title":"Migrate from v1.3.0​","type":1,"pageTitle":"Stitch v2.0.0","url":"/api-and-connectors/stitch-v2.0.0#migrate-from-v130","content":" Each correlation_id has been renamed id, and the previous id property is not available anymore.payload.respondent has been renamed payload.userpayload.response.answer.field has been converted into a array: payload.response.answer.fields  ","version":null,"tagName":"h2"},{"title":"Warehouse schema​","type":1,"pageTitle":"Stitch v2.0.0","url":"/api-and-connectors/stitch-v2.0.0#warehouse-schema","content":" Stitch delivers the responses to your surveys using the following database schema. In case of schema change, Stitch is in charge of updating columns in your datawarehouse.  Stitch requires an immutable primary key for identifying rows. Screeb uses event_id as primary key.  ","version":null,"tagName":"h2"},{"title":"Tables​","type":1,"pageTitle":"Stitch v2.0.0","url":"/api-and-connectors/stitch-v2.0.0#tables","content":" Table name\tDescription&lt;integration&gt;.data\tA table with response metadata (organization, channel, survey...). &lt;integration&gt;.data__response__items\tA table with pairs of questions and answers. &lt;integration&gt;.data__response__answer_fields or &lt;integration&gt;.data__response__items_answer_fields\tA table with question answer. &lt;integration&gt;.data__response__hidden_fields\tA table with your hidden fields linked to the response.  ","version":null,"tagName":"h3"},{"title":"data table​","type":1,"pageTitle":"Stitch v2.0.0","url":"/api-and-connectors/stitch-v2.0.0#data-table","content":" Column\tType\tDescription_sdc_batched_at\ttimestamp with time zone\tStitch internal _sdc_received_at\ttimestamp with time zone\tStitch internal _sdc_sequence\tbigint\tStitch internal _sdc_table_version\tbigint\tStitch internal event_id\ttext\tUnique id for this event (same id in retry request) event_type\ttext\tType of event sent over webhook event_time\ttext\tDate of event event_time_ms\tbigint\tDate of event in millisecond retry_count\tbigint\tNth request for this event version\ttext\tSemver version of the webhook payload organization__id\ttext\tUnique identifier for the organization organization__name\ttext\tName of the Screeb account channel__id\ttext\tUnique identifier for the channel channel__type\ttext\tChannel type (widget, android, ios, hosted-page...) user__anonymous_id\ttext\tMain user identifier user__user_id\ttext\tScreeb identifier for the user user__name\ttext\tUser name (when available in identity properties) user__email\ttext\tUser email (when available in identity properties) user__group_names\t[]text\tUser groups survey__id\ttext\tUnique identifier for the survey survey__name\ttext\tName of the survey survey__scenario_id\ttext\tUnique identifier for the survey scenario survey__scenario_time\ttext\tDate of the scenario edition survey__scenario_time_ms\tbigint\tTimestamp of the scenario edition survey__scenario_version\tbigint\tVersion number of the survey scenario response__id\ttext\tUnique identifier for the response response__time\ttext\tDate of response start response__time_ms\tbigint\tTimestamp of response start in millisecond response__time_to_complete_second\tbigint\tSeconds between survey display and response end (when event_type == response.ended) response__locale\ttext\tLocale of the user response__tags\t[]text\tTags of the response response__question__id\ttext\tUnique identifier for the question response__question__type\ttext\tType of question response__question__title\ttext\tLabel of the question response__answer__replied_at\ttext\tDate of the answer response__answer__replied_at_ms\tbigint\tTimestamp of the answer (millisecond) response__answer__tags\t[]text\tTags of the answer  ","version":null,"tagName":"h3"},{"title":"data__response__items table​","type":1,"pageTitle":"Stitch v2.0.0","url":"/api-and-connectors/stitch-v2.0.0#data__response__items-table","content":" Column\tType\tDescription_sdc_batched_at\ttimestamp with time zone\tStitch internal _sdc_level_0_id\tbigint\tStitch internal _sdc_received_at\ttimestamp with time zone\tStitch internal _sdc_sequence\tbigint\tStitch internal _sdc_source_key_event_id\ttext\tStitch internal _sdc_table_version\tbigint\tStitch internal question__id\ttext\tUnique identifier for the question question__type\ttext\tType of question question__title\ttext\tLabel of the question answer__replied_at\ttext\tDate of the answer answer__replied_at_ms\tbigint\tTimestamp of the answer (millisecond) answer__tags\t[]text\tTags of the answer  ","version":null,"tagName":"h3"},{"title":"data__response__answer_fields table​","type":1,"pageTitle":"Stitch v2.0.0","url":"/api-and-connectors/stitch-v2.0.0#data__response__answer_fields-table","content":" Column\tType\tDescription_sdc_batched_at\ttimestamp with time zone\tStitch internal _sdc_level_0_id\tbigint\tStitch internal _sdc_received_at\ttimestamp with time zone\tStitch internal _sdc_sequence\tbigint\tStitch internal _sdc_source_key_event_id\ttext\tStitch internal _sdc_table_version\tbigint\tStitch internal id\ttext\tUnique identifier for the field (a button, a score, an input...) type\ttext\tValue type: &quot;string&quot;, &quot;number&quot;, &quot;time&quot;, &quot;boolean&quot;... number\tbigint\tValue of the field (numeric) bool\tboolean\tValue of the field (boolean) string\ttext\tValue of the field (string) time\ttext\tValue of the field (string)  ","version":null,"tagName":"h3"},{"title":"data__response__hidden_fields table​","type":1,"pageTitle":"Stitch v2.0.0","url":"/api-and-connectors/stitch-v2.0.0#data__response__hidden_fields-table","content":" Column\tType\tDescription_sdc_batched_at\ttimestamp with time zone\tStitch internal _sdc_level_0_id\tbigint\tStitch internal _sdc_received_at\ttimestamp with time zone\tStitch internal _sdc_sequence\tbigint\tStitch internal _sdc_source_key_event_id\ttext\tStitch internal _sdc_table_version\tbigint\tStitch internal name\ttext\tHidden field key type\ttext\tHidden field value type: &quot;string&quot;, &quot;number&quot;, &quot;time&quot;, &quot;boolean&quot; value__number\tbigint\tValue of the hidden field (numeric) value__bo\tboolean\tValue of the hidden field (boolean) value__st\ttext\tValue of the hidden field (string)  ","version":null,"tagName":"h3"},{"title":"Support​","type":1,"pageTitle":"Stitch v2.0.0","url":"/api-and-connectors/stitch-v2.0.0#support","content":" If you have any questions or additional requirements, feel free to open an issue or contact samuel@screeb.app. ","version":null,"tagName":"h2"},{"title":"Reelases API","type":0,"sectionRef":"#","url":"/api-and-connectors/releases-api","content":"","keywords":"","version":null},{"title":"Authorization​","type":1,"pageTitle":"Reelases API","url":"/api-and-connectors/releases-api#authorization","content":" To push a new release to your organization, you will need an API Token generated for you. You can find it on the release create form, next to the Submit button.  ","version":null,"tagName":"h2"},{"title":"Endpoint​","type":1,"pageTitle":"Reelases API","url":"/api-and-connectors/releases-api#endpoint","content":" The releases API is accessible via the following endpoint: POST - https://api.screeb.app/1.0/release  The released_at field is optional and will default to the current date.  ","version":null,"tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Reelases API","url":"/api-and-connectors/releases-api#example","content":" Here is an example of a request that creates a release.  curl -X POST https://api.screeb.app/1.0/release \\ -H &quot;Content-Type: application/json&quot; \\ -H &quot;Authorization: Bearer my_api_token&quot; \\ -d '{ &quot;name&quot;: &quot;My release name&quot;, &quot;description&quot;: &quot;My release description&quot;, &quot;version&quot;: &quot;1.0&quot;, &quot;tags&quot;: [&quot;API&quot;, &quot;V1&quot;], &quot;released_at&quot;: &quot;2023-03-22T15:22:41+00:00&quot; }'   ","version":null,"tagName":"h2"},{"title":"Support​","type":1,"pageTitle":"Reelases API","url":"/api-and-connectors/releases-api#support","content":" If you have any questions or additional requirements, feel free to open an issue or contact samuel@screeb.app. ","version":null,"tagName":"h2"},{"title":"Stitch v1.0.0","type":0,"sectionRef":"#","url":"/api-and-connectors/stitch","content":"","keywords":"","version":null},{"title":"Entities​","type":1,"pageTitle":"Stitch v1.0.0","url":"/api-and-connectors/stitch#entities","content":" Organization: A Screeb account, shared by many Screeb users of your companyChannel: A distribution channel for your survey (Javascript SDK, Android SDK, iOS SDK...)SurveySurvey scenario: A versioned survey: on survey update, your flow is saved in a new scenario. New respondents will see the last scenario.Respondent: Information about the visitorResponse: A response is a chain of question+answers. A respondent sometimes has many responses to a single survey.QuestionAnswer: An answer is part of a response. Each answer is associated to a question.  ","version":null,"tagName":"h2"},{"title":"Hook types​","type":1,"pageTitle":"Stitch v1.0.0","url":"/api-and-connectors/stitch#hook-types","content":" You can send 3 different event types into your datawarehouse:  On survey display: a survey is shown to visitors, but no question is replied. You will get notified even if no response is given.On question answered: a question has been replied. This webhook will be triggered for each question of a single survey.On response end: a survey has been closed or fully replied to by the respondent.  ","version":null,"tagName":"h2"},{"title":"Warehouse schema​","type":1,"pageTitle":"Stitch v1.0.0","url":"/api-and-connectors/stitch#warehouse-schema","content":" Stitch delivers the responses to your surveys using the following database schema. In case of schema change, Stitch is in charge of updating columns into your datawarehouse.  Stitch requires an immutable primary key for identifying rows. Screeb uses event_id as primary key.  ","version":null,"tagName":"h2"},{"title":"Tables​","type":1,"pageTitle":"Stitch v1.0.0","url":"/api-and-connectors/stitch#tables","content":" Table name\tDescription&lt;integration&gt;.data\tA table with response metadata (organization, channel, survey...). &lt;integration&gt;.data__response__items\tA table with question answer. &lt;integration&gt;.data__response__hidden_fields\tA table with your hidden fields linked to the response.  ","version":null,"tagName":"h3"},{"title":"data table​","type":1,"pageTitle":"Stitch v1.0.0","url":"/api-and-connectors/stitch#data-table","content":" Column\tType\tDescription_sdc_batched_at\ttimestamp with time zone\tStitch internal _sdc_received_at\ttimestamp with time zone\tStitch internal _sdc_sequence\tbigint\tStitch internal _sdc_table_version\tbigint\tStitch internal event_id\ttext\tUnique id for this event (same id in retry request) event_type\ttext\tType of event sent over webhook event_time\ttext\tDate of event event_time_ms\tbigint\tDate of event in millisecond retry_count\tbigint\tNth request for this event version\ttext\tSemver version of the webhook payload organization__id\ttext\tUnique identifier for the organization organization__name\ttext\tName of the Screeb account channel__id\ttext\tUnique identifier for the channel channel__type\ttext\tChannel type (widget, android, ios, hosted-page...) respondent__id\ttext\tMain respondent identifier respondent__alias\ttext\tScreeb identifier for the respondent respondent__name\ttext\tRespondent name (when available in identity properties) respondent__email\ttext\tRespondent email (when available in identity properties) respondent__group_names\t[]text\tRespondent groups survey__id\ttext\tUnique identifier for the survey survey__name\ttext\tName of the survey survey__scenario_id\ttext\tUnique identifier for the survey scenario survey__scenario_time\ttext\tDate of the scenario edition survey__scenario_time_ms\tbigint\tTimestamp of the scenario edition survey__scenario_version\tbigint\tVersion number of the survey scenario response__id\ttext\tUnique identifier for the response response__time\ttext\tDate of response start response__time_ms\tbigint\tTimestamp of response start in millisecond response__time_to_complete_second\tbigint\tSeconds between survey display and response end (when event_type == response.ended) response__locale\ttext\tLocale of the respondent response__tags\t[]text\tTags of the response response__question__id\ttext\tUnique identifier for the question response__question__correlation_id\ttext\tCorrelation identifier for the question (shared over many survey scenario versions) response__question__type\ttext\tType of question response__question__title\ttext\tLabel of the question response__answer__replied_at\ttext\tDate of the answer response__answer__replied_at_ms\tbigint\tTimestamp of the answer (millisecond) response__answer__tags\t[]text\tTags of the answer response__answer__field__id\ttext\tUnique identifier for the field (a button, a score, an input...) response__answer__field__correlation_id\ttext\tCorrelation identifier for the field (shared over many survey scenario versions) response__answer__field__type\ttext\tValue type: &quot;string&quot;, &quot;number&quot;, &quot;time&quot;, &quot;boolean&quot;... response__answer__field__value__bi\tbigint\tValue of the answer (numeric) response__answer__field__value__bo\tboolean\tValue of the answer (boolean) response__answer__field__value__st\ttext\tValue of the answer (string)  ","version":null,"tagName":"h3"},{"title":"data__response__items table​","type":1,"pageTitle":"Stitch v1.0.0","url":"/api-and-connectors/stitch#data__response__items-table","content":" Column\tType\tDescription_sdc_batched_at\ttimestamp with time zone\tStitch internal _sdc_level_0_id\tbigint\tStitch internal _sdc_received_at\ttimestamp with time zone\tStitch internal _sdc_sequence\tbigint\tStitch internal _sdc_source_key_event_id\ttext\tStitch internal _sdc_table_version\tbigint\tStitch internal question__id\ttext\tUnique identifier for the question question__correlation_id\ttext\tCorrelation identifier for the question (shared over many survey scenario versions) question__type\ttext\tType of question question__title\ttext\tLabel of the question answer__replied_at\ttext\tDate of the answer answer__replied_at_ms\tbigint\tTimestamp of the answer (millisecond) answer__tags\t[]text\tTags of the answer answer__field__id\ttext\tUnique identifier for the field (a button, a score, an input...) answer__field__correlation_id\ttext\tCorrelation identifier for the field (shared over many survey scenario versions) answer__field__type\ttext\tValue type: &quot;string&quot;, &quot;number&quot;, &quot;time&quot;, &quot;boolean&quot;... answer__field__value__bi\tbigint\tValue of the answer (numeric) answer__field__value__bo\tboolean\tValue of the answer (boolean) answer__field__value__st\ttext\tValue of the answer (string)  ","version":null,"tagName":"h3"},{"title":"data__response__hidden_fields table​","type":1,"pageTitle":"Stitch v1.0.0","url":"/api-and-connectors/stitch#data__response__hidden_fields-table","content":" Column\tType\tDescription_sdc_batched_at\ttimestamp with time zone\tStitch internal _sdc_level_0_id\tbigint\tStitch internal _sdc_received_at\ttimestamp with time zone\tStitch internal _sdc_sequence\tbigint\tStitch internal _sdc_source_key_event_id\ttext\tStitch internal _sdc_table_version\tbigint\tStitch internal name\ttext\tHidden field key type\ttext\tHidden field value type: &quot;string&quot;, &quot;number&quot;, &quot;time&quot;, &quot;boolean&quot; value__bi\tbigint\tValue of the hidden field (numeric) value__bo\tboolean\tValue of the hidden field (boolean) value__st\ttext\tValue of the hidden field (string)  ","version":null,"tagName":"h3"},{"title":"Support​","type":1,"pageTitle":"Stitch v1.0.0","url":"/api-and-connectors/stitch#support","content":" If you have any questions or additional requirements, feel free to open an issue or contact samuel@screeb.app. ","version":null,"tagName":"h2"},{"title":"Push notifications","type":0,"sectionRef":"#","url":"/sdk-android/push-notifications","content":"","keywords":"","version":null},{"title":"Configuring the push notification​","type":1,"pageTitle":"Push notifications","url":"/sdk-android/push-notifications#configuring-the-push-notification","content":" Create a new campaign in your notification service admin (ex: Firebase) and prepare the content of the notification: title, body, target and schedule.  To configure the payload, add custom data (in the &quot;Additional options&quot; section for Firebase). For example, you can specify a key value like this   &quot;screeb&quot; : &quot;YOUR SURVEY ID&quot;  Then, launch the campaign.  ","version":null,"tagName":"h2"},{"title":"Foreground mode​","type":1,"pageTitle":"Push notifications","url":"/sdk-android/push-notifications#foreground-mode","content":" To receive the push messages payload when the app is in the foreground with Firebase, you must configure and declare a FirebaseMessagingService :   override fun onMessageReceived(remoteMessage: RemoteMessage) { // ... // Check if the message contains a data payload. if (remoteMessage.data.isNotEmpty()) { Log.d(TAG, &quot;Message data payload: ${remoteMessage.data}&quot;) Screeb.startSurveyFromNotification(remoteMessage.data[&quot;screeb&quot;]) } // ... }   ","version":null,"tagName":"h2"},{"title":"Background mode​","type":1,"pageTitle":"Push notifications","url":"/sdk-android/push-notifications#background-mode","content":" When an app is in the background, a notification is typically displayed by your push framework. When the user taps the notification, it opens the app with an intent that contains the payload you have previously configured.  Then you can get the Screeb id to start a survey in the Activity that has been started.   // Call this function from the onCreate of your Activity private fun manageNotifications() { intent.extras?.let { Screeb.startSurvey(it.getString(&quot;screeb&quot;)) } }  ","version":null,"tagName":"h2"},{"title":"Group assignation","type":0,"sectionRef":"#","url":"/sdk-android/group-assignation","content":"","keywords":"","version":null},{"title":"Default group type​","type":1,"pageTitle":"Group assignation","url":"/sdk-android/group-assignation#default-group-type","content":" Group type can be omitted:  Screeb.assignGroup(null, &quot;cohort-42&quot;)   From the Screeb platform, to customize the conditions the surveys are displayed for a visitor, you can apply custom targeting rules using group membership.  ","version":null,"tagName":"h3"},{"title":"Group name vs group id​","type":1,"pageTitle":"Group assignation","url":"/sdk-android/group-assignation#group-name-vs-group-id","content":" It is recommended to identify groups by using an immutable group id instead of a group name.  Screeb.assignGroup(&quot;company&quot;, &quot;nuR4eecu&quot;, GroupProperties().apply { this[&quot;name&quot;] = &quot;Apple&quot; }))   ","version":null,"tagName":"h3"},{"title":"Unassign group​","type":1,"pageTitle":"Group assignation","url":"/sdk-android/group-assignation#unassign-group","content":" At any time, you can unassign a user from a segment;  Screeb.unassignGroup(null, &quot;cohort-42&quot;)   ","version":null,"tagName":"h3"},{"title":"Attributes​","type":1,"pageTitle":"Group assignation","url":"/sdk-android/group-assignation#attributes","content":" In order to bring context to your event handling, some properties can be added to the event.  Requirements:  Property names must be limited to 128 charactersNo more than 1000 attributesSupported types for values: string, number, boolean and Date.  Screeb.assignGroup(&quot;company&quot;, &quot;nuR4eecu&quot;, GroupProperties().apply { this[&quot;name&quot;] = &quot;Apple&quot; this[&quot;employes&quot;] = &quot;100.000+&quot; })  ","version":null,"tagName":"h2"},{"title":"Identity","type":0,"sectionRef":"#","url":"/sdk-android/identity","content":"","keywords":"","version":null},{"title":"Set identity​","type":1,"pageTitle":"Identity","url":"/sdk-android/identity#set-identity","content":" When a user is identified in your app, you won't be able to identify who responded to surveys until you call the setIdentity command.  Thanks to this, you will be able to track this user over multiple platforms (desktop, mobile, tablet...).  The identifier of your website visitor must be unique and idempotent. User email is good, but can change over time. We recommend that you use the user id.  Requirements:  The unique visitor id must have a length between 1 to 255 characters.  // assign current session to a visitor identifier (such as your internal user id, an email address...) Screeb.setIdentity(&quot;&lt;unique-user-id&gt;&quot;) // You can also add properties (see properties configuration below) when calling `setIdentity` command: Screeb.setIdentity(&quot;&lt;unique-user-id&gt;&quot;, VisitorProperties().apply { this[&quot;firstname&quot;] = &quot;&lt;user-firstname&gt;&quot; this[&quot;lastname&quot;] = &quot;&lt;user-lastname&gt;&quot; this[&quot;plan&quot;] = &quot;&lt;user-plan&gt;&quot; this[&quot;age&quot;] = 42 this[&quot;logged_at&quot;] = Date() this[&quot;authenticated&quot;] = true })   ","version":null,"tagName":"h2"},{"title":"Reset current identity​","type":1,"pageTitle":"Identity","url":"/sdk-android/identity#reset-current-identity","content":" When the user logs out, please call the resetIdentity command.  This command must be called only once, since it creates a new identity on Screeb side. If you call it on every anonymous view, you won't be able to track visitor navigation and surveys will be sent many times to the same visitor.  Screeb.resetIdentity()   ","version":null,"tagName":"h3"},{"title":"Attributes​","type":1,"pageTitle":"Identity","url":"/sdk-android/identity#attributes","content":" Screeb allows tracking some custom data about your website visitors. Those properties can be inserted as &quot;hidden fields&quot; in your surveys or can be used for an advanced targeting rule.  Requirements:  Property names must be limited to 128 charactersNo more than 1000 attributesSupported types for values: string, number (Int, Long, Double), boolean and Date.  // set visitor properties Screeb.setVisitorProperties( VisitorProperties().apply { this[&quot;firstname&quot;] = &quot;&lt;user-firstname&gt;&quot; this[&quot;lastname&quot;] = &quot;&lt;user-lastname&gt;&quot; this[&quot;plan&quot;] = &quot;&lt;user-plan&gt;&quot; this[&quot;age&quot;] = 42 this[&quot;logged_at&quot;] = Date() this[&quot;authenticated&quot;] = true } ) // Delete visitor property: set values to null Screeb.setVisitorProperties( VisitorProperties().apply { this[&quot;firstname&quot;] = null this[&quot;lastname&quot;] = null this[&quot;plan&quot;] = null } )  ","version":null,"tagName":"h2"},{"title":"Screen tracking","type":0,"sectionRef":"#","url":"/sdk-android/screen-tracking","content":"","keywords":"","version":null},{"title":"Attributes​","type":1,"pageTitle":"Screen tracking","url":"/sdk-android/screen-tracking#attributes","content":" In order to bring context to your event handling, some properties can be added to the screen.  Requirements:  Property names must be limited to 128 charactersNo more than 1000 attributesSupported types for values: string, number (Int, Long, Double), boolean and Date.  // screen tracking with custom properties Screeb.trackScreen(&quot;ProductCartFragment&quot;, TrackingEventProperties().apply { this[&quot;product_name&quot;] = &quot;Red bike 2021&quot; this[&quot;category&quot;] = &quot;sport&quot; this[&quot;price&quot;] = 12.29 this[&quot;count&quot;] = 1 this[&quot;delivery_method&quot;] = &quot;UPS&quot; this[&quot;user_logged&quot;] = false this[&quot;added_at&quot;] = Date() })  ","version":null,"tagName":"h2"},{"title":"Reference","type":0,"sectionRef":"#","url":"/sdk-android/reference","content":"","keywords":"","version":null},{"title":"Introduction​","type":1,"pageTitle":"Reference","url":"/sdk-android/reference#introduction","content":" The reference is your key to a comprehensive understanding of the Screeb Android SDK.  ✨ If this is your first look at the documentation, we recommend beginning with the Getting started guide.  ","version":null,"tagName":"h2"},{"title":"Screeb methods​","type":1,"pageTitle":"Reference","url":"/sdk-android/reference#screeb-methods","content":" After installing the Screeb Android SDK in your mobile application, you will have access to the Screeb module. Screeb methods are executed sequentially.  Use the following syntaxt: Screeb.method(argument1, argument2, ...).  Method\tDefinition\tMoreinitSdk\tThe initSdk method starts the SDK and associates the current session to your Screeb project. Your android identifier must be passed. Optionally, this method can identify the current user. If no user identifier is provided, an anonymous visitor session is created. You will able to later change the current user by using the identity method.\t👉 closeSdk\tThe closeSdk method shutdowns the Screeb SDK. It is the opposite to initSdk.\t👉 setIdentity\tThe setIdentity method tells Screeb who the current user is. When Screeb is only installed on the logged page, please identify users using the initSdk method instead. This method allows identifying users lazily, on user login.\t👉 resetIdentity\tThe resetIdentity method tells Screeb to reset the current user session and switch to an anonymous user. Please note it won't disable the Android SDK until you call the closeSdk command.\t👉 setVisitorProperties\tThe setVisitorProperties method associates some contextual properties to the current user session. You will be able to personalize surveys and target questions to the right audience.\t👉 assignGroup\tThe assignGroup method assigns the current user to a Screeb segment. Some properties can be passed to the method to contextualize the segment.\t👉 unassignGroup\tThe unassignGroup method unassigns the current user from a Screeb segment.\t👉 trackEvent\tThe trackEvent method tracks actions performed by current user, along with properties describing the event.\t👉 trackScreen\tThe trackScreen method tracks the screen/view of the current user, along with properties describing the event.\t👉 startSurvey\tThe startSurvey method starts a survey by providing its id. Optionally, this command can prevent a user to see a single survey multiple times. Please note that running a survey using startSurvey will require a developer: to be autonomous, use the Screeb targeting engine instead.\t👉 debug\tThe debug method prints the current configuration of Screeb SDK, with website id, user id, session duration...\t👉 debugTargeting\tThe debugTargeting method prints the status of each targeting rule for each survey of your account.\t👉 ","version":null,"tagName":"h2"},{"title":"Troubleshooting","type":0,"sectionRef":"#","url":"/sdk-android/troubleshooting","content":"","keywords":"","version":null},{"title":"Check Android SDK is loaded correctly​","type":1,"pageTitle":"Troubleshooting","url":"/sdk-android/troubleshooting#check-android-sdk-is-loaded-correctly","content":" You can use the Screeb.debug() command in your code.  You will get contextual information in the debugging log about the running user session:    ℹ️ Output is printed with info log level.  ","version":null,"tagName":"h2"},{"title":"Debug targeting rules​","type":1,"pageTitle":"Troubleshooting","url":"/sdk-android/troubleshooting#debug-targeting-rules","content":" Since the targeting engine built by Screeb runs in the background, you may not understand which rules prevent your survey from being displayed to a user.  You can use the Screeb.debugTargeting() command in your code.  You will get a list of available surveys and the associated targeting rules:    The rules with a green dot 🟢 are the ones that have been validated for this user. The rules with a red dot 🔴 are not validated and may be the reason why your survey is not displayed.  ℹ️ Output is printed with info log level. ","version":null,"tagName":"h2"},{"title":"Event tracking","type":0,"sectionRef":"#","url":"/sdk-flutter/event-tracking","content":"","keywords":"","version":null},{"title":"Attributes​","type":1,"pageTitle":"Event tracking","url":"/sdk-flutter/event-tracking#attributes","content":" In order to bring context to your event handling, some properties can be added to the event.  Requirements:  Property names must be limited to 128 charactersNo more than 1000 attributesSupported types for values: string, number (Int, Long, Double), boolean and Date.  // trigger custom event PluginScreeb.trackEvent(&quot;Product added to cart&quot;, { product_name: &quot;Red bike 2021&quot;, category: &quot;sport&quot;, price: 12.29, count: 1, delivery_method: &quot;UPS&quot;, user_logged: false, added_at: new Date() })  ","version":null,"tagName":"h2"},{"title":"Install","type":0,"sectionRef":"#","url":"/sdk-android/install","content":"","keywords":"","version":null},{"title":"How to install the Android SDK in your app?​","type":1,"pageTitle":"Install","url":"/sdk-android/install#how-to-install-the-android-sdk-in-your-app","content":" See the example to install the last version of the Screeb SDK dependency in a native Android app.  You can find here useful information if you are using one of these technologies:  Flutter: Releases - sources - exampleReact Native: Releases - sources - example    ","version":null,"tagName":"h2"},{"title":"Screeb SDK Usage in CI Environments​","type":1,"pageTitle":"Install","url":"/sdk-android/install#screeb-sdk-usage-in-ci-environments","content":" Please note that if you are utilizing a Continuous Integration (CI) system, it is advisable to deactivate the Screeb SDK during CI execution. This precaution helps prevent the creation of numerous new anonymous users and potential exceedance of your MTU limit.  ","version":null,"tagName":"h2"},{"title":"Technical requirements​","type":1,"pageTitle":"Install","url":"/sdk-android/install#technical-requirements","content":" The Screeb SDK is configured to work with Android SDK version 19 minimum.  The size of the SDK is approximately 13 KB.  The SDK needs the permissions INTERNET to work well.  &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;   The SDK also need theses permissions if you want to use the Screeb Audio/Video feature.  &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.MICROPHONE&quot; /&gt; &lt;uses-feature android:name=&quot;android.hardware.camera&quot; android:required=&quot;true&quot;/&gt; &lt;uses-feature android:name=&quot;android.hardware.camera.autofocus&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.RECORD_AUDIO&quot; /&gt; &lt;uses-permission android:name=&quot;android.permission.MODIFY_AUDIO_SETTINGS&quot; /&gt;   ","version":null,"tagName":"h2"},{"title":"How to configure the Android SDK in your app?​","type":1,"pageTitle":"Install","url":"/sdk-android/install#how-to-configure-the-android-sdk-in-your-app","content":" ","version":null,"tagName":"h2"},{"title":"Add Screeb as a dependency​","type":1,"pageTitle":"Install","url":"/sdk-android/install#add-screeb-as-a-dependency","content":" # build.gradle allprojects { repositories { mavenCentral() } } implementation 'app.screeb.sdk:survey:x.x.x'   ","version":null,"tagName":"h3"},{"title":"Import Screeb SDK into your package​","type":1,"pageTitle":"Install","url":"/sdk-android/install#import-screeb-sdk-into-your-package","content":" import app.screeb.sdk.Screeb   ","version":null,"tagName":"h3"},{"title":"Setup the SDK​","type":1,"pageTitle":"Install","url":"/sdk-android/install#setup-the-sdk","content":" // simple initialization Screeb.initSdk(this, &quot;&lt;android-channel-id&gt;&quot;) // detailed initialization using a unique id and custom properties, see Identify visitors section Screeb.initSdk(this, &quot;&lt;android-channel-id&gt;&quot;, &quot;&lt;unique-user-id&gt;&quot;, // optional VisitorProperties().apply { // optional this[&quot;firstname&quot;] = &quot;&lt;user-firstname&gt;&quot; this[&quot;lastname&quot;] = &quot;&lt;user-lastname&gt;&quot; this[&quot;plan&quot;] = &quot;&lt;user-plan&gt;&quot; this[&quot;age&quot;] = 42 this[&quot;logged_at&quot;] = Date() this[&quot;authenticated&quot;] = true }, InitOptions( automaticScreenDetection = true|false // optional, default: false ) )   Fullscreen mode allows adapting screeb view bottom margin when an app is in fullscreen mode.  ","version":null,"tagName":"h3"},{"title":"About SDK lifecycle​","type":1,"pageTitle":"Install","url":"/sdk-android/install#about-sdk-lifecycle","content":" At any time, you can disable the Screeb SDK with the following command:  Screeb.close()   ","version":null,"tagName":"h2"},{"title":"Next steps​","type":1,"pageTitle":"Install","url":"/sdk-android/install#next-steps","content":" ","version":null,"tagName":"h2"},{"title":"1- Identify visitors​","type":1,"pageTitle":"Install","url":"/sdk-android/install#1--identify-visitors","content":" See here.  ","version":null,"tagName":"h3"},{"title":"2- Event tracking​","type":1,"pageTitle":"Install","url":"/sdk-android/install#2--event-tracking","content":" See here.  ","version":null,"tagName":"h3"},{"title":"3- Screen tracking​","type":1,"pageTitle":"Install","url":"/sdk-android/install#3--screen-tracking","content":" See here.  ","version":null,"tagName":"h3"},{"title":"4- Start the survey programmatically​","type":1,"pageTitle":"Install","url":"/sdk-android/install#4--start-the-survey-programmatically","content":" See here.  ","version":null,"tagName":"h3"},{"title":"SDK dependencies​","type":1,"pageTitle":"Install","url":"/sdk-android/install#sdk-dependencies","content":" If you face any issues with our dependencies, please contact our support team.  core-ktx:1.6.0webkit:1.7.0com.google.android.play:review:2.0.1com.google.android.play:review-ktx:2.0.1 ","version":null,"tagName":"h2"},{"title":"Reference","type":0,"sectionRef":"#","url":"/sdk-flutter/reference","content":"","keywords":"","version":null},{"title":"Introduction​","type":1,"pageTitle":"Reference","url":"/sdk-flutter/reference#introduction","content":" The reference is your key to a comprehensive understanding of the Screeb Flutter SDK.  ✨ If this is your first look at the documentation, we recommend beginning with the Getting started guide.  ","version":null,"tagName":"h2"},{"title":"Screeb methods​","type":1,"pageTitle":"Reference","url":"/sdk-flutter/reference#screeb-methods","content":" After installing the Screeb Flutter SDK in your mobile application, you will have access to the PluginScreeb module. PluginScreeb methods are executed sequentially.  Use the following syntaxt: PluginScreeb.method(argument1, argument2, ...).  Method\tDefinition\tMoreinitSdk\tThe initSdk method starts the SDK and associates the current session to your Screeb project. Your android and your ios identifier must be passed. Optionally, this method can identify the current user. If no user identifier is provided, an anonymous visitor session is created. You will able to later change the current user by using the identity method.\t👉 closeSdk\tThe closeSdk method shutdowns the Screeb SDK. It is the opposite to initSdk.\t👉 setIdentity\tThe setIdentity method tells Screeb who the current user is. When Screeb is only installed on the logged page, please identify users using the initSdk method instead. This method allows identifying users lazily, on user login.\t👉 resetIdentity\tThe resetIdentity method tells Screeb to reset the current user session and switch to an anonymous user. Please note it won't disable the Flutter SDK until you call the closeSdk command.\t👉 setVisitorProperties\tThe setVisitorProperties method associates some contextual properties to the current user session. You will be able to personalize surveys and target questions to the right audience.\t👉 assignGroup\tThe assignGroup method assigns the current user to a Screeb segment. Some properties can be passed to the method to contextualize the segment.\t👉 unassignGroup\tThe unassignGroup method unassigns the current user from a Screeb segment.\t👉 trackEvent\tThe trackEvent method tracks actions performed by current user, along with properties describing the event.\t👉 trackScreen\tThe trackScreen method tracks the screen/view of the current user, along with properties describing the event.\t👉 startSurvey\tThe startSurvey method starts a survey by providing its id. Optionally, this command can prevent a user to see a single survey multiple times. Please note that running a survey using startSurvey will require a developer: to be autonomous, use the Screeb targeting engine instead.\t👉 debug\tThe debug method prints the current configuration of Screeb SDK, with website id, user id, session duration...\t👉 debugTargeting\tThe debugTargeting method prints the status of each targeting rule for each survey of your account.\t👉 ","version":null,"tagName":"h2"},{"title":"Start survey programmatically","type":0,"sectionRef":"#","url":"/sdk-android/start-survey-programmatically","content":"","keywords":"","version":null},{"title":"How to start a survey programmatically?​","type":1,"pageTitle":"Start survey programmatically","url":"/sdk-android/start-survey-programmatically#how-to-start-a-survey-programmatically","content":" In most cases, you should let the Screeb targeting engine start the survey. But sometimes, you may want to run a survey on user action.  Screeb.startSurvey( surveyId = &quot;&lt;SURVEY_ID&gt;&quot; )   ","version":null,"tagName":"h2"},{"title":"Prevent multiple displays?​","type":1,"pageTitle":"Start survey programmatically","url":"/sdk-android/start-survey-programmatically#prevent-multiple-displays","content":" If current user already replied to your survey and you would rather not display it many times, please add the allowMultipleResponses argument:  Screeb.startSurvey( surveyId = &quot;&lt;SURVEY_ID&gt;&quot;, allowMultipleResponses = false )   ","version":null,"tagName":"h2"},{"title":"Contextualize response​","type":1,"pageTitle":"Start survey programmatically","url":"/sdk-android/start-survey-programmatically#contextualize-response","content":" The startSurvey command accepts a list of hidden fields. Values passed as parameters will be listed alongside the responses, on the Screeb platform.  Screeb.startSurvey( surveyId = &quot;&lt;SURVEY_ID&gt;&quot;, hiddenFields = HiddenFields().apply { this[&quot;h1&quot;] = &quot;hidden_field1&quot; this[&quot;h_count&quot;] = 75 } )  ","version":null,"tagName":"h2"},{"title":"Screen tracking","type":0,"sectionRef":"#","url":"/sdk-flutter/screen-tracking","content":"","keywords":"","version":null},{"title":"Attributes​","type":1,"pageTitle":"Screen tracking","url":"/sdk-flutter/screen-tracking#attributes","content":" In order to bring context to your event handling, some properties can be added to the screen.  Requirements:  Property names must be limited to 128 charactersNo more than 1000 attributesSupported types for values: string, number (Int, Long, Double), boolean and Date.  // screen tracking with custom properties PluginScreeb.trackScreen('MyHomeScreen', { 'example-prop1': false, 'example-prop2': 29, 'example-prop3' : 'iPhone 13', });  ","version":null,"tagName":"h2"},{"title":"Install","type":0,"sectionRef":"#","url":"/sdk-flutter/install","content":"","keywords":"","version":null},{"title":"How to install the Flutter SDK in your app?​","type":1,"pageTitle":"Install","url":"/sdk-flutter/install#how-to-install-the-flutter-sdk-in-your-app","content":" See the example to install the last version of the Screeb SDK dependency in a Flutter app.    ","version":null,"tagName":"h2"},{"title":"Screeb SDK Usage in CI Environments​","type":1,"pageTitle":"Install","url":"/sdk-flutter/install#screeb-sdk-usage-in-ci-environments","content":" Please note that if you are utilizing a Continuous Integration (CI) system, it is advisable to deactivate the Screeb SDK during CI execution. This precaution helps prevent the creation of numerous new anonymous users and potential exceedance of your MTU limit.  ","version":null,"tagName":"h2"},{"title":"Technical requirements​","type":1,"pageTitle":"Install","url":"/sdk-flutter/install#technical-requirements","content":" The Screeb SDK is configured to work with Android SDK version 19 minimum and iOS version 11.0 minimum.  The Swift version is &gt;= v5.5.2 and XCode version &gt;= 13.2.1.  The size of the SDK is approximately 27 KB on Android and approximately 198 KB on iOS.  ","version":null,"tagName":"h2"},{"title":"How to configure the Flutter SDK in your app?​","type":1,"pageTitle":"Install","url":"/sdk-flutter/install#how-to-configure-the-flutter-sdk-in-your-app","content":" First, log in to the Screeb application, then create your first survey.  ","version":null,"tagName":"h2"},{"title":"Add Screeb as a dependency​","type":1,"pageTitle":"Install","url":"/sdk-flutter/install#add-screeb-as-a-dependency","content":" # pubspec.yaml dependencies: plugin_screeb: x.x.x   Then:  flutter pub get   ","version":null,"tagName":"h3"},{"title":"Android​","type":1,"pageTitle":"Install","url":"/sdk-flutter/install#android","content":" The Android SDK needs the permissions INTERNET to work well.  &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;   The SDK also need theses permissions if you want to use the Screeb Audio/Video feature.  &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.MICROPHONE&quot; /&gt; &lt;uses-feature android:name=&quot;android.hardware.camera&quot; android:required=&quot;true&quot;/&gt; &lt;uses-feature android:name=&quot;android.hardware.camera.autofocus&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.RECORD_AUDIO&quot; /&gt; &lt;uses-permission android:name=&quot;android.permission.MODIFY_AUDIO_SETTINGS&quot; /&gt;   ","version":null,"tagName":"h3"},{"title":"iOS​","type":1,"pageTitle":"Install","url":"/sdk-flutter/install#ios","content":" The SDK need theses permissions if you want to use the Screeb Audio/Video feature.  &lt;key&gt;NSCameraUsageDescription&lt;/key&gt; &lt;string&gt;This app needs access to the camera to take photos.&lt;/string&gt; &lt;key&gt;NSMicrophoneUsageDescription&lt;/key&gt; &lt;string&gt;This app needs access to microphone to record audio.&lt;/string&gt; &lt;key&gt;UISupportedInterfaceOrientations&lt;/key&gt;   Update​  When upgrading the Flutter SDK version, you may need to run in ios/ directory:  cd ios/ pod update Screeb   ","version":null,"tagName":"h3"},{"title":"Setup the SDK​","type":1,"pageTitle":"Install","url":"/sdk-flutter/install#setup-the-sdk","content":" PluginScreeb.initSdk(&quot;&lt;android-channel-id&gt;&quot;, &quot;&lt;ios-channel-id&gt;&quot;, null);   ","version":null,"tagName":"h3"},{"title":"About SDK lifecycle​","type":1,"pageTitle":"Install","url":"/sdk-flutter/install#about-sdk-lifecycle","content":" At any time, you can disable the Screeb SDK with the following command:  PluginScreeb.close()   ","version":null,"tagName":"h3"},{"title":"Next steps​","type":1,"pageTitle":"Install","url":"/sdk-flutter/install#next-steps","content":" ","version":null,"tagName":"h2"},{"title":"1- Identify visitors​","type":1,"pageTitle":"Install","url":"/sdk-flutter/install#1--identify-visitors","content":" See here.  ","version":null,"tagName":"h3"},{"title":"2- Event tracking​","type":1,"pageTitle":"Install","url":"/sdk-flutter/install#2--event-tracking","content":" See here.  ","version":null,"tagName":"h3"},{"title":"3- Screen tracking​","type":1,"pageTitle":"Install","url":"/sdk-flutter/install#3--screen-tracking","content":" See here.  ","version":null,"tagName":"h3"},{"title":"4- Start the survey programmatically​","type":1,"pageTitle":"Install","url":"/sdk-flutter/install#4--start-the-survey-programmatically","content":" See here. ","version":null,"tagName":"h3"},{"title":"Identity","type":0,"sectionRef":"#","url":"/sdk-flutter/identity","content":"","keywords":"","version":null},{"title":"Set identity​","type":1,"pageTitle":"Identity","url":"/sdk-flutter/identity#set-identity","content":" When a user is identified in your app, you won't be able to identify who responded to surveys until you call the setIdentity command.  Thanks to this, you will be able to track this user over multiple platforms (desktop, mobile, tablet...).  The identifier of your website visitor must be unique and idempotent. User email is good, but can change over time. We recommend that you use the user id.  Requirements:  The unique visitor id must have a length between 1 to 255 characters.  PluginScreeb.setIdentity(&quot;&lt;user-id&gt;&quot;);   ","version":null,"tagName":"h2"},{"title":"Reset current identity​","type":1,"pageTitle":"Identity","url":"/sdk-flutter/identity#reset-current-identity","content":" When the user logs out, please call the resetIdentity command.  This command must be called only once, since it creates a new identity on Screeb side. If you call it on every anonymous view, you won't be able to track visitor navigation and surveys will be sent many times to the same visitor.  PluginScreeb.resetIdentity()   ","version":null,"tagName":"h3"},{"title":"Attributes​","type":1,"pageTitle":"Identity","url":"/sdk-flutter/identity#attributes","content":" Screeb allows tracking some custom data about your website visitors. Those properties can be inserted as &quot;hidden fields&quot; in your surveys or can be used for an advanced targeting rule.  Requirements:  Property names must be limited to 128 charactersNo more than 1000 attributesSupported types for values: string, number (Int, Long, Double), boolean and Date.  // Set visitor properties PluginScreeb.setIdentity(&quot;&lt;user-id&gt;&quot;, &lt;String, dynamic&gt;{ 'isConnected': true, 'age': 27, 'company' : 'Screeb', 'technology' : 'iOS', 'flutterAccount' : true }); // Delete visitor property: set values to null PluginScreeb.setIdentity(&quot;&lt;user-id&gt;&quot;, &lt;String, dynamic&gt;{ 'isConnected': null, 'age': null, 'company' : null, 'technology' : null, 'flutterAccount' : null });  ","version":null,"tagName":"h2"},{"title":"Start survey programmatically","type":0,"sectionRef":"#","url":"/sdk-flutter/start-survey-programmatically","content":"","keywords":"","version":null},{"title":"How to start a survey programmatically?​","type":1,"pageTitle":"Start survey programmatically","url":"/sdk-flutter/start-survey-programmatically#how-to-start-a-survey-programmatically","content":" In most cases, you should let the Screeb targeting engine start the survey. But sometimes, you may want to run a survey on user action.  PluginScreeb.startSurvey(&quot;&lt;survey-id&gt;&quot;);   You will find survey id in Screeb platform.  ","version":null,"tagName":"h2"},{"title":"Prevent multiple displays?​","type":1,"pageTitle":"Start survey programmatically","url":"/sdk-flutter/start-survey-programmatically#prevent-multiple-displays","content":" If current user already replied to your survey and you would rather not display it many times, please add the allowMultipleResponses argument:  PluginScreeb.startSurvey(&quot;&lt;survey-id&gt;&quot;, false);   ","version":null,"tagName":"h2"},{"title":"Contextualize response​","type":1,"pageTitle":"Start survey programmatically","url":"/sdk-flutter/start-survey-programmatically#contextualize-response","content":" The startSurvey command accepts a list of hidden fields. Values passed as parameters will be listed alongside the responses, on the Screeb platform.  PluginScreeb.startSurvey(&quot;&lt;survey-id&gt;&quot;, true, { color: &quot;red&quot;, size: 42 });  ","version":null,"tagName":"h2"},{"title":"Group assignation","type":0,"sectionRef":"#","url":"/sdk-ios/group-assignation","content":"","keywords":"","version":null},{"title":"Default group type​","type":1,"pageTitle":"Group assignation","url":"/sdk-ios/group-assignation#default-group-type","content":" Group type can be omitted:  Screeb.assignGroup(type: nil, name: &quot;cohort-42&quot;)   From the Screeb platform, to customize the conditions the surveys are displayed for a visitor, you can apply custom targeting rules using group membership.  ","version":null,"tagName":"h3"},{"title":"Unassign group​","type":1,"pageTitle":"Group assignation","url":"/sdk-ios/group-assignation#unassign-group","content":" At any time, you can unassign a user from a segment;  Screeb.unassignGroup(type: nil, name: &quot;cohort-42&quot;)   ","version":null,"tagName":"h3"},{"title":"Attributes​","type":1,"pageTitle":"Group assignation","url":"/sdk-ios/group-assignation#attributes","content":" In order to bring context to your event handling, some properties can be added to the event.  Requirements:  Property names must be limited to 128 charactersNo more than 1000 attributesSupported types for values: string, number, boolean and Date.  Screeb.assignGroup(type: &quot;company&quot;, name: &quot;Apple&quot;, properties: [ &quot;iosGroupProp1&quot;: AnyEncodable(&quot;prop1&quot;), &quot;iosGroupProp2&quot;: AnyEncodable(75) ])  ","version":null,"tagName":"h2"},{"title":"Webhook v1.3.0","type":0,"sectionRef":"#","url":"/api-and-connectors/webhook-v1.3.0","content":"","keywords":"","version":null},{"title":"Entities​","type":1,"pageTitle":"Webhook v1.3.0","url":"/api-and-connectors/webhook-v1.3.0#entities","content":" Organization: A Screeb account, shared by many Screeb users of your companyChannel: A distribution channel for your survey (Javascript SDK, Android SDK, iOS SDK...)SurveySurvey scenario: A versioned survey: on survey update, your flow is saved in a new scenario. New respondents will see the last scenario.Respondent: Information about the visitorResponse: A response is a chain of question+answers. A respondent sometimes has many responses to a single survey.QuestionAnswer: An answer is part of a response. Each answer is associated with a question.  ","version":null,"tagName":"h2"},{"title":"Hook types​","type":1,"pageTitle":"Webhook v1.3.0","url":"/api-and-connectors/webhook-v1.3.0#hook-types","content":" You can trigger webhooks on 3 different events:  On survey display: a survey is shown to visitors, but no question is replied. You will get notified even if no response is given.On question answered: a question has been replied. This webhook will be triggered for each question of a single survey.On response end: a survey has been closed or fully replied to by the user.  ","version":null,"tagName":"h2"},{"title":"Errors​","type":1,"pageTitle":"Webhook v1.3.0","url":"/api-and-connectors/webhook-v1.3.0#errors","content":" On large synchronization order, the webhook destination may reply to Screeb with a 429 HTTP error (rate limiting). Screeb will resend these messages many times, with exponential delay.  ","version":null,"tagName":"h2"},{"title":"Example payload​","type":1,"pageTitle":"Webhook v1.3.0","url":"/api-and-connectors/webhook-v1.3.0#example-payload","content":" Webhooks deliver the responses to your surveys in JSON format, via a POST HTTP request. Here is a typical webhook payload:  { &quot;event_id&quot;: &quot;64c7ea3b-827b-4679-b25d-7fd61f6c3d33&quot;, &quot;event_type&quot;: &quot;response.ended&quot;, &quot;version&quot;: &quot;1.3.0&quot;, &quot;time&quot;: &quot;2021-07-29T13:45:09.325344042Z&quot;, &quot;time_ms&quot;: 1627566309325, &quot;payload&quot;: { &quot;organization&quot;: { &quot;id&quot;: &quot;b5969d13-5e5e-4648-9806-5339ddafd984&quot;, &quot;name&quot;: &quot;ACME&quot; }, &quot;channel&quot;: { &quot;id&quot;: &quot;411ee7c3-7e64-409f-9d75-c782b3f73aa4&quot;, &quot;type&quot;: &quot;android&quot; }, &quot;survey&quot;: { &quot;id&quot;: &quot;9b913c69-3daf-4a6e-a26d-042004fc7881&quot;, &quot;name&quot;: &quot;Measure NPS&quot;, &quot;scenario_id&quot;: &quot;cc4a3710-e8ee-4672-a35c-5c17485ec441&quot;, &quot;scenario_version&quot;: 9, &quot;scenario_time&quot;: &quot;2021-07-29T00:08:31.069497Z&quot;, &quot;scenario_time_ms&quot;: 1627517311069 }, &quot;respondent&quot;: { &quot;id&quot;: &quot;2eb83fb4-b1b3-4e48-be48-a8fd9c4e5a7d&quot;, &quot;alias&quot;: &quot;samuel@screeb.app&quot;, &quot;aliases&quot;: [ &quot;2eb83fb4-b1b3-4e48-be48-a8fd9c4e5a7d&quot;, &quot;samuel@screeb.app&quot; ], &quot;name&quot;: &quot;Samuel Berthe&quot;, &quot;email&quot;: &quot;samuel@screeb.app&quot;, &quot;group_names&quot;: [&quot;Screeb&quot;, &quot;10-100-companies&quot;, &quot;plan-enterprise&quot;] }, &quot;response&quot;: { &quot;id&quot;: &quot;5854a797-628c-4906-bb4c-da03e418cf47&quot;, &quot;locale&quot;: &quot;en-US&quot;, &quot;time&quot;: &quot;2021-07-29T13:44:59.831Z&quot;, &quot;time_ms&quot;: 1627918228831, &quot;time_to_complete_second&quot;: 34, &quot;completion&quot;: &quot;fully_completed&quot;, &quot;hidden_fields&quot;: { &quot;firstname&quot;: &quot;Samuel&quot;, &quot;lastname&quot;: &quot;Berthe&quot;, &quot;email&quot;: &quot;samuel@screeb.app&quot;, &quot;locale&quot;: &quot;en-US&quot;, &quot;support&quot;: &quot;desktop&quot;, &quot;timezone&quot;: -120, &quot;user_agent&quot;: &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) ....&quot; }, &quot;question&quot;: { &quot;id&quot;: &quot;25c06995-b8aa-45d1-a03d-cd885a6ead58&quot;, &quot;correlation_id&quot;: &quot;a44252c3-ef3d-4156-90d6-a3d6364516c0&quot;, &quot;type&quot;: &quot;input&quot;, &quot;title&quot;: &quot;How can we improve your experience?&quot; }, &quot;answer&quot;: { &quot;field&quot;: { &quot;id&quot;: &quot;ca679de0-6f45-485d-be00-77aa15677d23&quot;, &quot;correlation_id&quot;: &quot;c71dfe9d-6b47-452f-bda2-6091c13561b0&quot;, &quot;type&quot;: &quot;string&quot;, &quot;value&quot;: &quot;The new dashboard is buggy.&quot;, // @DEPRECATED &quot;text&quot;: &quot;The new dashboard is buggy.&quot;, &quot;number&quot;: null, &quot;boolean&quot;: null, &quot;time&quot;: null }, &quot;replied_at&quot;: &quot;2021-07-29T13:45:09.286Z&quot;, &quot;replied_at_ms&quot;: 1627566309286, &quot;tags&quot;: [&quot;screeb&quot;, &quot;feedbback&quot;] }, &quot;tags&quot;: [&quot;screeb&quot;, &quot;feedbback&quot;], &quot;items&quot;: [ { &quot;question&quot;: {...}, &quot;answer&quot;: {...} }, { &quot;question&quot;: {...}, &quot;answer&quot;: {...} }, { &quot;question&quot;: {...}, &quot;answer&quot;: {...} } ] } } }   ","version":null,"tagName":"h2"},{"title":"Spec​","type":1,"pageTitle":"Webhook v1.3.0","url":"/api-and-connectors/webhook-v1.3.0#spec","content":" Current version: 1.3.0  When the destination server replies with a 4xx or 5xx status code, Screeb platform sends a new request after 60s (once).  ","version":null,"tagName":"h2"},{"title":"Metadata​","type":1,"pageTitle":"Webhook v1.3.0","url":"/api-and-connectors/webhook-v1.3.0#metadata","content":" Field\tType\tOptional\tdescriptionevent_id\tuuid\tNo\tUnique id for this event (same id in retry request) event_type\tenum: response.displayed, response.answered or response.ended\tNo\tType of event sent over webhook time\tDate\tNo\tDate of event time_ms\tlong\tNo\tTimestamp of event in millisecond version\tstring\tNo\tSemver version of the webhook payload payload\t&lt;Payload&gt;\tNo\tSee &quot;Payload&quot; section  ","version":null,"tagName":"h3"},{"title":"Payload​","type":1,"pageTitle":"Webhook v1.3.0","url":"/api-and-connectors/webhook-v1.3.0#payload","content":" Field\ttype\tOptional\tdescriptionorganization\tOrganization\tNo\tOrganization details channel\tChannel\tNo\tChannel details survey\tSurvey\tNo\tSurvey details respondent\tRespondent\tNo\tRespondent details response\tResponse\tNo\tResponse details  ","version":null,"tagName":"h3"},{"title":"Organization​","type":1,"pageTitle":"Webhook v1.3.0","url":"/api-and-connectors/webhook-v1.3.0#organization","content":" Field\ttype\tOptional\tdescriptionid\tuuid\tNo\tUnique identifier for the organization name\tstring\tNo\tName of the Screeb account  ","version":null,"tagName":"h3"},{"title":"Channel​","type":1,"pageTitle":"Webhook v1.3.0","url":"/api-and-connectors/webhook-v1.3.0#channel","content":" Field\ttype\tOptional\tdescriptionid\tuuid\tNo\tUnique identifier for the channel type\tstring\tNo\tChannel type (widget, android, ios, hosted-page...)  ","version":null,"tagName":"h3"},{"title":"Survey​","type":1,"pageTitle":"Webhook v1.3.0","url":"/api-and-connectors/webhook-v1.3.0#survey","content":" Field\ttype\tOptional\tdescriptionid\tuuid\tNo\tUnique identifier for the survey name\tstring\tNo\tName of the survey scenario_id\tstring\tNo\tUnique identifier for the survey scenario scenario_version\tint\tNo\tVersion number of the survey scenario scenario_time\tDate\tNo\tDate of the scenario edition scenario_time_ms\tint\tNo\tTimestamp of the scenario edition (millisecond)  ","version":null,"tagName":"h3"},{"title":"Respondent​","type":1,"pageTitle":"Webhook v1.3.0","url":"/api-and-connectors/webhook-v1.3.0#respondent","content":" Field\ttype\tOptional\tdescriptionid\tuuid\tNo\tScreeb identifier for the respondent alias\tArray&lt;string&gt;\tNo\tMain respondent identifier aliases\tArray&lt;string&gt;\tNo\tList of respondent aliases name\tstring\tYes\tRespondent name (when available in identity properties) email\tstring\tYes\tRespondent email (when available in identity properties) group_names\tArray&lt;string&gt;\tYes\tRespondent groups  ","version":null,"tagName":"h3"},{"title":"Response​","type":1,"pageTitle":"Webhook v1.3.0","url":"/api-and-connectors/webhook-v1.3.0#response","content":" Field\ttype\tOptional\tdescriptionid\tuuid\tNo\tUnique identifier for the response locale\tstring\tYes\tLocale of the respondent time\tDate\tNo\tDate of response start time_ms\tlong\tNo\tTimestamp of response start in millisecond time_to_complete_second\tlong\tYes\tSeconds between survey display and response end (when event_type == response.ended) completion\tstring\tYes\t&quot;not_started&quot;, &quot;partially_completed&quot; or &quot;fully_completed&quot; hidden_fields\tobject\tYes\tKey/Value of the hidden fields question\tQuestion\tYes\tSee the &quot;Question&quot; section (when event_type == response.answered) answer\tAnswer\tYes\tSee the &quot;Answer&quot; section (when event_type == response.answered) items\tItem[]\tNo\tSee the &quot;Item&quot; section (when event_type == response.answered  ","version":null,"tagName":"h3"},{"title":"Question​","type":1,"pageTitle":"Webhook v1.3.0","url":"/api-and-connectors/webhook-v1.3.0#question","content":" Field\ttype\tOptional\tdescriptionid\tuuid\tNo\tUnique identifier for the question correlation_id\tuuid\tNo\tCorrelation identifier for the question (shared over many survey scenario versions) type\tstring\tNo\tType of question title\tstring\tNo\tLabel of the question  ","version":null,"tagName":"h3"},{"title":"Answer​","type":1,"pageTitle":"Webhook v1.3.0","url":"/api-and-connectors/webhook-v1.3.0#answer","content":" Field\ttype\tOptional\tdescriptionfield.id\tuuid\tNo\tUnique identifier for the field (a button, a score, an input...) field.correlation_id\tuuid\tNo\tCorrelation identifier for the field (shared over many survey scenario versions) field.type\tstring\tNo\tValue type: &quot;string&quot;, &quot;number&quot;, &quot;time&quot;, &quot;boolean&quot;... field.value\tstring\tNo\tDEPRECATED: Value of the answer (always string) field.text\tstring\tYes\tValue of the answer, when type is &quot;string&quot; field.number\tnumber\tYes\tValue of the answer, when type is &quot;number&quot; field.boolean\tstring\tYes\tValue of the answer, when type is &quot;boolean&quot; field.time\tstring\tYes\tValue of the answer, when type is &quot;time&quot; replied_at\tDate\tNo\tDate of the answer replied_at_ms\tint\tNo\tTimestamp of the answer (millisecond)  NPS, CES and CSAT will be sent as numeric values, instead of emojis.  ","version":null,"tagName":"h3"},{"title":"Item​","type":1,"pageTitle":"Webhook v1.3.0","url":"/api-and-connectors/webhook-v1.3.0#item","content":" Field\ttype\tOptional\tdescriptionquestion\tQuestion\tNo\tSee the &quot;Question&quot; section answer\tAnswer\tNo\tSee the &quot;Answer&quot; section  ","version":null,"tagName":"h3"},{"title":"Security​","type":1,"pageTitle":"Webhook v1.3.0","url":"/api-and-connectors/webhook-v1.3.0#security","content":" To protect your server from unauthorized webhook events, we strongly recommend that you use HMAC signatures.  Each webhook event will include a signature calculated using a secret key (available on Screeb platform) and a payload from the webhook. By verifying this signature, you confirm that the webhook was sent by Screeb, and was not modified during transmission.  The signature is provided in the headers in this way:  x-screeb-hmac-digest: HMAC-SHA256-BASE64 x-screeb-hmac-signature-url: k8TREZiVCkqywuUT1Lmxa4exhXOf0IS24ibxDIJ3ka8= x-screeb-hmac-signature-body: uGv+PueUDB/r+3r7/NMfui8wMDerRynN95BacNbGntpE/G7aAi9FNqjYe51ENbFG/d7o3X5uS40ixPNNP1hP/Q==   Here is an example of a signature validation in NodeJS:  function computeHash(secret, payload) { var crypto = require('crypto'); var hmac = crypto.createHmac('sha256', secret); hmac.write(payload); hmac.end(); return hmac.read().toString('base64'); }; function hashIsValid(secret, payload, verify) { return crypto.timingSafeEqual(verify, computeHash(secret,payload)); }; function webhookHandler(req, res) { var hmac = req.header('x-screeb-hmac-signature-body'); var body = req.body; var ok = hashIsValid(process.env.SCREEB_SECRET, body, hmac); if (!ok) { res.status(403); res.send({message: &quot;invalid signature&quot;}); return; } }   ","version":null,"tagName":"h2"},{"title":"Support​","type":1,"pageTitle":"Webhook v1.3.0","url":"/api-and-connectors/webhook-v1.3.0#support","content":" If you have any questions or additional requirements, feel free to open an issue or contact samuel@screeb.app. ","version":null,"tagName":"h2"},{"title":"Troubleshooting","type":0,"sectionRef":"#","url":"/sdk-flutter/troubleshooting","content":"","keywords":"","version":null},{"title":"Check Flutter SDK is loaded correctly​","type":1,"pageTitle":"Troubleshooting","url":"/sdk-flutter/troubleshooting#check-flutter-sdk-is-loaded-correctly","content":" You can use the PluginScreeb.debug() command in your code.  You will get contextual information in the debugging log about the running user session:    ","version":null,"tagName":"h2"},{"title":"Debug targeting rules​","type":1,"pageTitle":"Troubleshooting","url":"/sdk-flutter/troubleshooting#debug-targeting-rules","content":" Since the targeting engine built by Screeb runs in the background, you may not understand which rules prevent your survey from being displayed to a user.  You can use the PluginScreeb.debugTargeting() command in your code.  You will get a list of available surveys and the associated targeting rules:    The rules with a green dot 🟢 are the ones that have been validated for this user. The rules with a red dot 🔴 are not validated and may be the reason why your survey is not displayed.  ","version":null,"tagName":"h2"},{"title":"Warning iOS​","type":1,"pageTitle":"Troubleshooting","url":"/sdk-flutter/troubleshooting#warning-ios","content":" You won't see debug log on iOS if you didn't launch your app with xcode ","version":null,"tagName":"h2"},{"title":"Event tracking","type":0,"sectionRef":"#","url":"/sdk-ios/event-tracking","content":"","keywords":"","version":null},{"title":"Attributes​","type":1,"pageTitle":"Event tracking","url":"/sdk-ios/event-tracking#attributes","content":" In order to bring context to your event handling, some properties can be added to the event.  Requirements:  Property names must be limited to 128 charactersNo more than 1000 attributesSupported types for values: string, number (Int, Long, Double), boolean and Date.  // trigger custom event Screeb.trackEvent(name: &quot;Product added to cart&quot;, trackingEventProperties: [ &quot;product_name&quot;: AnyEncodable(&quot;Red bike 2021&quot;), &quot;category&quot;: AnyEncodable(&quot;sport&quot;), &quot;price&quot;: AnyEncodable(12.29), &quot;count&quot;: AnyEncodable(1), &quot;delivery_method&quot;: AnyEncodable(&quot;UPS&quot;), &quot;user_logged&quot;: AnyEncodable(false), &quot;added_at&quot;: AnyEncodable(Date()) ])  ","version":null,"tagName":"h2"},{"title":"Group assignation","type":0,"sectionRef":"#","url":"/sdk-flutter/group-assignation","content":"","keywords":"","version":null},{"title":"Default group type​","type":1,"pageTitle":"Group assignation","url":"/sdk-flutter/group-assignation#default-group-type","content":" Group type can be omitted:  PluginScreeb.assignGroup(null, &quot;cohort-42&quot;);   From the Screeb platform, to customize the conditions the surveys are displayed for a visitor, you can apply custom targeting rules using group membership.  ","version":null,"tagName":"h3"},{"title":"Group name vs group id​","type":1,"pageTitle":"Group assignation","url":"/sdk-flutter/group-assignation#group-name-vs-group-id","content":" It is recommended to identify groups by using an immutable group id instead of a group name.  PluginScreeb.assignGroup(&quot;company&quot;, &quot;nuR4eecu&quot;, { name: &quot;Apple&quot; });   ","version":null,"tagName":"h3"},{"title":"Unassign group​","type":1,"pageTitle":"Group assignation","url":"/sdk-flutter/group-assignation#unassign-group","content":" At any time, you can unassign a user from a segment;  PluginScreeb.unassignGroup(null, &quot;cohort-42&quot;);   ","version":null,"tagName":"h3"},{"title":"Attributes​","type":1,"pageTitle":"Group assignation","url":"/sdk-flutter/group-assignation#attributes","content":" In order to bring context to your event handling, some properties can be added to the event.  Requirements:  Property names must be limited to 128 charactersNo more than 1000 attributesSupported types for values: string, number, boolean and Date.  PluginScreeb.assignGroup(&quot;company&quot;, &quot;nuR4eecu&quot;, { name: &quot;Apple&quot;, employes: &quot;100.000+&quot;, })  ","version":null,"tagName":"h2"},{"title":"Identity","type":0,"sectionRef":"#","url":"/sdk-ios/identity","content":"","keywords":"","version":null},{"title":"Set identity​","type":1,"pageTitle":"Identity","url":"/sdk-ios/identity#set-identity","content":" When a user is identified in your app, you won't be able to identify who responded to surveys until you call the setIdentity command.  Thanks to this, you will be able to track this user over multiple platforms (desktop, mobile, tablet...).  The identifier of your website visitor must be unique and idempotent. User email is good, but can change over time. We recommend that you use the user id.  Requirements:  The unique visitor id must have a length between 1 to 255 characters.  import Screeb ... // assign current session to a visitor identifier (such as your internal user id, an email address...) Screeb.setIdentity(uniqueVisitorId: &quot;&lt;unique-visitor-id&gt;&quot;) // You can also add properties (see Attributes configuration below) when calling identity command : Screeb.setIdentity(uniqueVisitorId: &quot;&lt;unique-visitor-id&gt;&quot;, visitorProperty: [ &quot;age&quot;: AnyEncodable(27), &quot;category&quot;: AnyEncodable(&quot;cycle&quot;), &quot;purchasedAt&quot;: AnyEncodable(Date()) ])   ","version":null,"tagName":"h2"},{"title":"Reset current identity​","type":1,"pageTitle":"Identity","url":"/sdk-ios/identity#reset-current-identity","content":" When the user logs out, please call the resetIdentity command.  This command must be called only once, since it creates a new identity on Screeb side. If you call it on every anonymous view, you won't be able to track visitor navigation and surveys will be sent many times to the same visitor.  Screeb.resetIdentity()   ","version":null,"tagName":"h3"},{"title":"Attributes​","type":1,"pageTitle":"Identity","url":"/sdk-ios/identity#attributes","content":" Screeb allows tracking some custom data about your website visitors. Those properties can be inserted as &quot;hidden fields&quot; in your surveys or can be used for an advanced targeting rule.  Requirements:  Property names must be limited to 128 charactersNo more than 1000 attributesSupported types for values: string, number (Int, Long, Double), boolean and Date.  import Screeb ... // set visitor properties Screeb.visitorProperty(visitorProperty: [ &quot;email&quot; = AnyEncodable(&quot;clement@screeb.app&quot;), &quot;age&quot; = AnyEncodable(29), &quot;logged&quot; = AnyEncodable(true), &quot;signed_up_at&quot; = AnyEncodable(Date()), ]) // Delete visitor property: set values to nil Screeb.visitorProperty(visitorProperty: [ &quot;email&quot; = AnyEncodable(&quot;clement@screeb.app&quot;), &quot;age&quot; = AnyEncodable(29), &quot;logged&quot; = nil, &quot;signed_up_at&quot; = AnyEncodable(Date()), ])  ","version":null,"tagName":"h2"},{"title":"Hooks","type":0,"sectionRef":"#","url":"/sdk-flutter/flutter-hooks","content":"","keywords":"","version":null},{"title":"Set hooks​","type":1,"pageTitle":"Hooks","url":"/sdk-flutter/flutter-hooks#set-hooks","content":" You can define custom hooks to be executed on various events.  Thanks to this you will be able to interact with your application when a survey appears, or execute some custom code when a survey is submitted.  You can define hooks on PluginScreeb.initSdk() and PluginScreeb.startSurvey() commands. Hooks are all optional.  Available hooks are:  onSurveyShowed: called when a survey is showedonSurveyStarted: called when a survey is startedonQuestionReplied: called when a question is repliedonSurveyCompleted: called when a survey is completedonSurveyHidden: called when a survey is hiddenonReady: called when the SDK is ready (Only available on PluginScreeb.initSdk())  ","version":null,"tagName":"h2"},{"title":"Set hooks on SDK init​","type":1,"pageTitle":"Hooks","url":"/sdk-flutter/flutter-hooks#set-hooks-on-sdk-init","content":" PluginScreeb.initSdk( &quot;&lt;android-channel-id&gt;&quot;, &quot;&lt;ios-channel-id&gt;&quot;, &quot;&lt;user-id&gt;&quot;, &quot;&lt;properties&gt;&quot;, &lt;String, dynamic&gt;{ &quot;version&quot;: &quot;1.0.0&quot;, &quot;onReady&quot;: (dynamic data) { log(&quot;onReady $data&quot;); }, });   ","version":null,"tagName":"h3"},{"title":"Set hooks on survey start​","type":1,"pageTitle":"Hooks","url":"/sdk-flutter/flutter-hooks#set-hooks-on-survey-start","content":" PluginScreeb.startSurvey(&quot;&lt;surveyId&gt;&quot;, &quot;&lt;allowMultipleResponses&gt;&quot;, &quot;&lt;properties&gt;&quot;, &quot;&lt;ignoreSurveyStatus&gt;&quot;, &lt;String, dynamic&gt;{ &quot;version&quot;: &quot;1.0.0&quot;, &quot;onSurveyShowed&quot;: (dynamic data) { print(&quot;onSurveyShowed&quot;); print(data.toString()); }, &quot;onQuestionReplied&quot;: (dynamic data) { print(&quot;onQuestionReplied&quot;); print(data.toString()); }, },);   ","version":null,"tagName":"h3"},{"title":"Payload types​","type":1,"pageTitle":"Hooks","url":"/sdk-flutter/flutter-hooks#payload-types","content":" onSurveyShowed: { channel: { id: string, type: &quot;android&quot; | &quot;ios&quot; }, survey: { id: string, survey_position: &quot;center-left&quot; | &quot;center-center&quot; | &quot;center-right&quot; | &quot;bottom-left&quot; | &quot;bottom-center&quot; | &quot;bottom-right&quot;, survey_size: 25 | 50 | 75 | 100 | 125 | 150, survey_format: &quot;conversational&quot; | &quot;cards&quot;, }, response: { id: string, items: { question: { id: string; title: string; type: &quot;text&quot; | &quot;video&quot;; url: string; }; answer: { fields: { type: &quot;string&quot; | &quot;number&quot; | &quot;boolean&quot; | &quot;none&quot; | &quot;time&quot; | &quot;url&quot;; }, text: string; number: number; boolean: boolean; time: Date; url: string; }[] | undefined; replied_at: Date | undefined; }[]; }, user: { anonymous_id: string, user_id: string, } } onSurveyStarted: { channel: { id: string, type: &quot;android&quot; | &quot;ios&quot; }, survey: { id: string, survey_position: &quot;center-left&quot; | &quot;center-center&quot; | &quot;center-right&quot; | &quot;bottom-left&quot; | &quot;bottom-center&quot; | &quot;bottom-right&quot;, survey_size: 25 | 50 | 75 | 100 | 125 | 150, survey_format: &quot;conversational&quot; | &quot;cards&quot;, }, response: { id: string, }, user: { anonymous_id: string, user_id: string, } } onQuestionReplied: { channel: { id: string, type: &quot;android&quot; | &quot;ios&quot; }, survey: { id: string, survey_position: &quot;center-left&quot; | &quot;center-center&quot; | &quot;center-right&quot; | &quot;bottom-left&quot; | &quot;bottom-center&quot; | &quot;bottom-right&quot;, survey_size: 25 | 50 | 75 | 100 | 125 | 150, survey_format: &quot;conversational&quot; | &quot;cards&quot;, }, response: { id: string, status: &quot;started&quot; | &quot;ended&quot; | &quot;closed&quot; | &quot;interrupted&quot; question: { id: string; title: string; type: &quot;text&quot; | &quot;video&quot;; url: string; }; answer: { fields: { type: &quot;string&quot; | &quot;number&quot; | &quot;boolean&quot; | &quot;none&quot; | &quot;time&quot; | &quot;url&quot;; }, text: string; number: number; boolean: boolean; time: Date; url: string; }; items: { question: { id: string; title: string; type: &quot;text&quot; | &quot;video&quot;; url: string; }; answer: { fields: { type: &quot;string&quot; | &quot;number&quot; | &quot;boolean&quot; | &quot;none&quot; | &quot;time&quot; | &quot;url&quot;; }, text: string; number: number; boolean: boolean; time: Date; url: string; }[] | undefined; replied_at: Date | undefined; }[]; }, user: { anonymous_id: string, user_id: string, } } onSurveyCompleted: { channel: { id: string, type: &quot;android&quot; | &quot;ios&quot; }, survey: { id: string, survey_position: &quot;center-left&quot; | &quot;center-center&quot; | &quot;center-right&quot; | &quot;bottom-left&quot; | &quot;bottom-center&quot; | &quot;bottom-right&quot;, survey_size: 25 | 50 | 75 | 100 | 125 | 150, survey_format: &quot;conversational&quot; | &quot;cards&quot;, }, response: { id: string, items: { question: { id: string; title: string; type: &quot;text&quot; | &quot;video&quot;; url: string; }; answer: { fields: { type: &quot;string&quot; | &quot;number&quot; | &quot;boolean&quot; | &quot;none&quot; | &quot;time&quot; | &quot;url&quot;; }, text: string; number: number; boolean: boolean; time: Date; url: string; }[] | undefined; replied_at: Date | undefined; }[]; }, user: { anonymous_id: string, user_id: string, } } onSurveyHidden: { channel: { id: string, type: &quot;android&quot; | &quot;ios&quot; }, survey: { id: string, survey_position: &quot;center-left&quot; | &quot;center-center&quot; | &quot;center-right&quot; | &quot;bottom-left&quot; | &quot;bottom-center&quot; | &quot;bottom-right&quot;, survey_size: 25 | 50 | 75 | 100 | 125 | 150, survey_format: &quot;conversational&quot; | &quot;cards&quot;, }, response: { id: string, hide_reason: &quot;started&quot; | &quot;ended&quot; | &quot;closed&quot; | &quot;interrupted&quot;, items: { question: { id: string; title: string; type: &quot;text&quot; | &quot;video&quot;; url: string; }; answer: { fields: { type: &quot;string&quot; | &quot;number&quot; | &quot;boolean&quot; | &quot;none&quot; | &quot;time&quot; | &quot;url&quot;; }, text: string; number: number; boolean: boolean; time: Date; url: string; }[] | undefined; replied_at: Date | undefined; }[]; }, user: { anonymous_id: string, user_id: string, } } onReady: { channel: { id: string, type: &quot;android&quot; | &quot;ios&quot; }, user: { anonymous_id: string, user_id: string, } }  ","version":null,"tagName":"h3"},{"title":"Webhook v2.0.0","type":0,"sectionRef":"#","url":"/api-and-connectors/webhook-v2.0.0","content":"","keywords":"","version":null},{"title":"Entities​","type":1,"pageTitle":"Webhook v2.0.0","url":"/api-and-connectors/webhook-v2.0.0#entities","content":" Organization: A Screeb account, shared by many Screeb users of your companyChannel: A distribution channel for your survey (Javascript SDK, Android SDK, iOS SDK...)SurveySurvey scenario: A versioned survey: on survey update, your flow is saved in a new scenario. New users will see the last scenario.User: Information about the visitorResponse: A response is a chain of question+answers. A user sometimes has many responses to a single survey.QuestionAnswer: An answer is part of a response. Each answer is associated with a question.Field: An answer may have many fields (eg: multiple choices question)  ","version":null,"tagName":"h2"},{"title":"Hook types​","type":1,"pageTitle":"Webhook v2.0.0","url":"/api-and-connectors/webhook-v2.0.0#hook-types","content":" You can trigger webhooks on 3 different events:  On survey display: a survey is shown to visitors, but no question is replied. You will get notified even if no response is given.On question answered: a question has been replied. This webhook will be triggered for each question of a single survey.On response end: a survey has been closed or fully replied to by the user.  ","version":null,"tagName":"h2"},{"title":"Errors​","type":1,"pageTitle":"Webhook v2.0.0","url":"/api-and-connectors/webhook-v2.0.0#errors","content":" On large synchronization order, the webhook destination may reply to Screeb with a 429 HTTP error (rate limiting). Screeb will resend these messages many times, with exponential delay.  ","version":null,"tagName":"h2"},{"title":"Migrate from v1.3.0​","type":1,"pageTitle":"Webhook v2.0.0","url":"/api-and-connectors/webhook-v2.0.0#migrate-from-v130","content":" Each correlation_id has been renamed id, and the previous id property is not available anymore.payload.respondent has been renamed payload.userpayload.response.answer.field has been converted into a array: payload.response.answer.fields  ","version":null,"tagName":"h2"},{"title":"Example payload​","type":1,"pageTitle":"Webhook v2.0.0","url":"/api-and-connectors/webhook-v2.0.0#example-payload","content":" Webhooks deliver the responses to your surveys in JSON format, via a POST HTTP request. Here is a typical webhook payload:  { &quot;event_id&quot;: &quot;64c7ea3b-827b-4679-b25d-7fd61f6c3d33&quot;, &quot;event_type&quot;: &quot;response.ended&quot;, &quot;version&quot;: &quot;2.0.0&quot;, &quot;time&quot;: &quot;2021-07-29T13:45:09.325344042Z&quot;, &quot;time_ms&quot;: 1627566309325, &quot;payload&quot;: { &quot;organization&quot;: { &quot;id&quot;: &quot;b5969d13-5e5e-4648-9806-5339ddafd984&quot;, &quot;name&quot;: &quot;ACME&quot; }, &quot;channel&quot;: { &quot;id&quot;: &quot;411ee7c3-7e64-409f-9d75-c782b3f73aa4&quot;, &quot;type&quot;: &quot;android&quot; }, &quot;survey&quot;: { &quot;id&quot;: &quot;9b913c69-3daf-4a6e-a26d-042004fc7881&quot;, &quot;name&quot;: &quot;Measure NPS&quot;, &quot;scenario_id&quot;: &quot;cc4a3710-e8ee-4672-a35c-5c17485ec441&quot;, &quot;scenario_version&quot;: 9, &quot;scenario_time&quot;: &quot;2021-07-29T00:08:31.069497Z&quot;, &quot;scenario_time_ms&quot;: 1627517311069 }, &quot;user&quot;: { &quot;anonymous_id&quot;: &quot;2eb83fb4-b1b3-4e48-be48-a8fd9c4e5a7d&quot;, &quot;user_id&quot;: &quot;samuel@screeb.app&quot;, &quot;name&quot;: &quot;Samuel Berthe&quot;, &quot;email&quot;: &quot;samuel@screeb.app&quot;, &quot;group_names&quot;: [&quot;Screeb&quot;, &quot;10-100-companies&quot;, &quot;plan-enterprise&quot;] }, &quot;response&quot;: { &quot;id&quot;: &quot;5854a797-628c-4906-bb4c-da03e418cf47&quot;, &quot;locale&quot;: &quot;en-US&quot;, &quot;time&quot;: &quot;2021-07-29T13:44:59.831Z&quot;, &quot;time_ms&quot;: 1627918228831, &quot;time_to_complete_second&quot;: 34, &quot;completion&quot;: &quot;fully_completed&quot;, &quot;hidden_fields&quot;: { &quot;firstname&quot;: &quot;Samuel&quot;, &quot;lastname&quot;: &quot;Berthe&quot;, &quot;email&quot;: &quot;samuel@screeb.app&quot;, &quot;locale&quot;: &quot;en-US&quot;, &quot;support&quot;: &quot;desktop&quot;, &quot;timezone&quot;: -120, &quot;user_agent&quot;: &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) ....&quot; }, &quot;question&quot;: { &quot;id&quot;: &quot;a44252c3-ef3d-4156-90d6-a3d6364516c0&quot;, &quot;type&quot;: &quot;input&quot;, &quot;title&quot;: &quot;How can we improve your experience?&quot; }, &quot;answer&quot;: { &quot;fields&quot;: [ { &quot;id&quot;: &quot;c71dfe9d-6b47-452f-bda2-6091c13561b0&quot;, &quot;type&quot;: &quot;string&quot;, &quot;value&quot;: &quot;The new dashboard is buggy.&quot;, &quot;text&quot;: &quot;The new dashboard is buggy.&quot;, &quot;number&quot;: null, &quot;boolean&quot;: null, &quot;time&quot;: null } ], &quot;replied_at&quot;: &quot;2021-07-29T13:45:09.286Z&quot;, &quot;replied_at_ms&quot;: 1627566309286, &quot;tags&quot;: [&quot;screeb&quot;, &quot;feedbback&quot;] }, &quot;tags&quot;: [&quot;screeb&quot;, &quot;feedbback&quot;], &quot;items&quot;: [ { &quot;question&quot;: {...}, &quot;answer&quot;: {...} }, { &quot;question&quot;: {...}, &quot;answer&quot;: {...} }, { &quot;question&quot;: {...}, &quot;answer&quot;: {...} } ] } } }   ","version":null,"tagName":"h2"},{"title":"Spec​","type":1,"pageTitle":"Webhook v2.0.0","url":"/api-and-connectors/webhook-v2.0.0#spec","content":" Current version: 2.0.0  When the destination server replies with a 4xx or 5xx status code, Screeb platform sends a new request after 60s (once).  ","version":null,"tagName":"h2"},{"title":"Metadata​","type":1,"pageTitle":"Webhook v2.0.0","url":"/api-and-connectors/webhook-v2.0.0#metadata","content":" Field\tType\tOptional\tdescriptionevent_id\tuuid\tNo\tUnique id for this event (same id in retry request) event_type\tenum: response.displayed, response.answered or response.ended\tNo\tType of event sent over webhook time\tDate\tNo\tDate of event time_ms\tlong\tNo\tTimestamp of event in millisecond version\tstring\tNo\tSemver version of the webhook payload payload\t&lt;Payload&gt;\tNo\tSee &quot;Payload&quot; section  ","version":null,"tagName":"h3"},{"title":"Payload​","type":1,"pageTitle":"Webhook v2.0.0","url":"/api-and-connectors/webhook-v2.0.0#payload","content":" Field\ttype\tOptional\tdescriptionorganization\tOrganization\tNo\tOrganization details channel\tChannel\tNo\tChannel details survey\tSurvey\tNo\tSurvey details user\tUser\tNo\tUser details response\tResponse\tNo\tResponse details  ","version":null,"tagName":"h3"},{"title":"Organization​","type":1,"pageTitle":"Webhook v2.0.0","url":"/api-and-connectors/webhook-v2.0.0#organization","content":" Field\ttype\tOptional\tdescriptionid\tuuid\tNo\tUnique identifier for the organization name\tstring\tNo\tName of the Screeb account  ","version":null,"tagName":"h3"},{"title":"Channel​","type":1,"pageTitle":"Webhook v2.0.0","url":"/api-and-connectors/webhook-v2.0.0#channel","content":" Field\ttype\tOptional\tdescriptionid\tuuid\tNo\tUnique identifier for the channel type\tstring\tNo\tChannel type (widget, android, ios, hosted-page...)  ","version":null,"tagName":"h3"},{"title":"Survey​","type":1,"pageTitle":"Webhook v2.0.0","url":"/api-and-connectors/webhook-v2.0.0#survey","content":" Field\ttype\tOptional\tdescriptionid\tuuid\tNo\tUnique identifier for the survey name\tstring\tNo\tName of the survey scenario_id\tstring\tNo\tUnique identifier for the survey scenario scenario_version\tint\tNo\tVersion number of the survey scenario scenario_time\tDate\tNo\tDate of the scenario edition scenario_time_ms\tint\tNo\tTimestamp of the scenario edition (millisecond)  ","version":null,"tagName":"h3"},{"title":"User​","type":1,"pageTitle":"Webhook v2.0.0","url":"/api-and-connectors/webhook-v2.0.0#user","content":" Field\ttype\tOptional\tdescriptionanonymous_id\tuuid\tNo\tScreeb identifier for the user user_id\tstring\tNo\tMain user identifier name\tstring\tYes\tUser name (when available in identity properties) email\tstring\tYes\tUser email (when available in identity properties) group_names\tArray&lt;string&gt;\tYes\tUser groups  ","version":null,"tagName":"h3"},{"title":"Response​","type":1,"pageTitle":"Webhook v2.0.0","url":"/api-and-connectors/webhook-v2.0.0#response","content":" Field\ttype\tOptional\tdescriptionid\tuuid\tNo\tUnique identifier for the response locale\tstring\tYes\tLocale of the respondent time\tDate\tNo\tDate of response start time_ms\tlong\tNo\tTimestamp of response start in millisecond time_to_complete_second\tlong\tYes\tSeconds between survey display and response end (when event_type == response.ended) completion\tstring\tYes\t&quot;not_started&quot;, &quot;partially_completed&quot; or &quot;fully_completed&quot; hidden_fields\tobject\tYes\tKey/Value of the hidden fields question\tQuestion\tYes\tSee the &quot;Question&quot; section (when event_type == response.answered) answer\tAnswer\tYes\tSee the &quot;Answer&quot; section (when event_type == response.answered) items\tItem[]\tNo\tSee the &quot;Item&quot; section (when event_type == response.answered  ","version":null,"tagName":"h3"},{"title":"Question​","type":1,"pageTitle":"Webhook v2.0.0","url":"/api-and-connectors/webhook-v2.0.0#question","content":" Field\ttype\tOptional\tdescriptionid\tuuid\tNo\tUnique identifier for the question type\tstring\tNo\tType of question title\tstring\tNo\tLabel of the question  ","version":null,"tagName":"h3"},{"title":"Answer​","type":1,"pageTitle":"Webhook v2.0.0","url":"/api-and-connectors/webhook-v2.0.0#answer","content":" Field\ttype\tOptional\tdescriptionfields\tField[]\tNo\tList of values. See the &quot;Field&quot; section replied_at\tDate\tNo\tDate of the answer replied_at_ms\tint\tNo\tTimestamp of the answer (millisecond)  ","version":null,"tagName":"h3"},{"title":"Field​","type":1,"pageTitle":"Webhook v2.0.0","url":"/api-and-connectors/webhook-v2.0.0#field","content":" Field\ttype\tOptional\tdescriptionid\tuuid\tNo\tUnique identifier for the field type\tstring\tNo\tValue type: &quot;string&quot;, &quot;number&quot;, &quot;time&quot;, &quot;boolean&quot;... value\tstring\tNo\tPrintable value of the field (always string) text\tstring\tYes\tValue of the field, when type is &quot;string&quot; number\tnumber\tYes\tValue of the field, when type is &quot;number&quot; boolean\tstring\tYes\tValue of the field, when type is &quot;boolean&quot; time\tstring\tYes\tValue of the field, when type is &quot;time&quot;  NPS, CES and CSAT will be sent as numeric values, instead of emojis.  ","version":null,"tagName":"h3"},{"title":"Item​","type":1,"pageTitle":"Webhook v2.0.0","url":"/api-and-connectors/webhook-v2.0.0#item","content":" Field\ttype\tOptional\tdescriptionquestion\tQuestion\tNo\tSee the &quot;Question&quot; section answer\tAnswer\tNo\tSee the &quot;Answer&quot; section  ","version":null,"tagName":"h3"},{"title":"Security​","type":1,"pageTitle":"Webhook v2.0.0","url":"/api-and-connectors/webhook-v2.0.0#security","content":" To protect your server from unauthorized webhook events, we strongly recommend that you use HMAC signatures.  Each webhook event will include a signature calculated using a secret key (available on Screeb platform) and a payload from the webhook. By verifying this signature, you confirm that the webhook was sent by Screeb, and was not modified during transmission.  The signature is provided in the headers in this way:  x-screeb-hmac-digest: HMAC-SHA256-BASE64 x-screeb-hmac-signature-url: k8TREZiVCkqywuUT1Lmxa4exhXOf0IS24ibxDIJ3ka8= x-screeb-hmac-signature-body: uGv+PueUDB/r+3r7/NMfui8wMDerRynN95BacNbGntpE/G7aAi9FNqjYe51ENbFG/d7o3X5uS40ixPNNP1hP/Q==   Here is an example of a signature validation in NodeJS:  function computeHash(secret, payload) { var crypto = require('crypto'); var hmac = crypto.createHmac('sha256', secret); hmac.write(payload); hmac.end(); return hmac.read().toString('base64'); }; function hashIsValid(secret, payload, verify) { return crypto.timingSafeEqual(verify, computeHash(secret,payload)); }; function webhookHandler(req, res) { var hmac = req.header('x-screeb-hmac-signature-body'); var body = req.body; var ok = hashIsValid(process.env.SCREEB_SECRET, body, hmac); if (!ok) { res.status(403); res.send({message: &quot;invalid signature&quot;}); return; } }   ","version":null,"tagName":"h2"},{"title":"Support​","type":1,"pageTitle":"Webhook v2.0.0","url":"/api-and-connectors/webhook-v2.0.0#support","content":" If you have any questions or additional requirements, feel free to open an issue or contact samuel@screeb.app. ","version":null,"tagName":"h2"},{"title":"Troubleshooting","type":0,"sectionRef":"#","url":"/sdk-ios/troubleshooting","content":"","keywords":"","version":null},{"title":"\"Failed to build module 'Screeb'; this SDK is not supported by the compiler\"​","type":1,"pageTitle":"Troubleshooting","url":"/sdk-ios/troubleshooting#failed-to-build-module-screeb-this-sdk-is-not-supported-by-the-compiler","content":" ScreebModule.swift:1:8 Failed to build module 'Screeb'; this SDK is not supported by the compiler (the SDK is built with 'Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)', while this compiler is 'Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)'). Please select a toolchain which matches the SDK.   This compilation error is raised when support for library evolution is not enabled. Please add the following configuration to your Podfile:  post_install do |installer| installer.pods_project.targets.each do |target| target.build_configurations.each do |config| config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES' end end end   ","version":null,"tagName":"h2"},{"title":"Check IOS SDK is loaded correctly​","type":1,"pageTitle":"Troubleshooting","url":"/sdk-ios/troubleshooting#check-ios-sdk-is-loaded-correctly","content":" You can use the Screeb.debug() command in your code.  You will get contextual information in the debugging log about the running user session:    ","version":null,"tagName":"h2"},{"title":"Debug targeting rules​","type":1,"pageTitle":"Troubleshooting","url":"/sdk-ios/troubleshooting#debug-targeting-rules","content":" Since the targeting engine built by Screeb runs in the background, you may not understand which rules prevent your survey from being displayed to a user.  You can use the Screeb.debugTargeting() command in your code.  You will get a list of available surveys and the associated targeting rules:    The rules with a green dot 🟢 are the ones that have been validated for this user. The rules with a red dot 🔴 are not validated and may be the reason why your survey is not displayed. ","version":null,"tagName":"h2"},{"title":"Start survey programmatically","type":0,"sectionRef":"#","url":"/sdk-ios/start-survey-programmatically","content":"","keywords":"","version":null},{"title":"How to start a survey programmatically?​","type":1,"pageTitle":"Start survey programmatically","url":"/sdk-ios/start-survey-programmatically#how-to-start-a-survey-programmatically","content":" In most cases, you should let the Screeb targeting engine start the survey. But sometimes, you may want to run a survey on user action.  Screeb.startSurvey( surveyId = &quot;&lt;SURVEY_ID&gt;&quot; )   ","version":null,"tagName":"h2"},{"title":"Prevent multiple displays?​","type":1,"pageTitle":"Start survey programmatically","url":"/sdk-ios/start-survey-programmatically#prevent-multiple-displays","content":" If current user already replied to your survey and you would rather not display it many times, please add the allowMultipleResponses argument:  Screeb.startSurvey( surveyId = &quot;&lt;SURVEY_ID&gt;&quot;, allowMultipleResponses = false )   ","version":null,"tagName":"h2"},{"title":"Contextualize response​","type":1,"pageTitle":"Start survey programmatically","url":"/sdk-ios/start-survey-programmatically#contextualize-response","content":" The startSurvey command accepts a list of hidden fields. Values passed as parameters will be listed alongside the responses, on the Screeb platform.  Screeb.startSurvey( surveyId = &quot;&lt;SURVEY_ID&gt;&quot;, hiddenFields: [ “iosHidden1&quot;: AnyEncodable(“hiddenField1”), “iosHiddenCount”: AnyEncodable(75) ] )  ","version":null,"tagName":"h2"},{"title":"Event tracking","type":0,"sectionRef":"#","url":"/sdk-js/event-tracking","content":"","keywords":"","version":null},{"title":"Attributes​","type":1,"pageTitle":"Event tracking","url":"/sdk-js/event-tracking#attributes","content":" In order to bring context to your event handling, some properties can be added to the event.  Requirements:  Property names must be limited to 128 charactersNo more than 1000 attributesSupported types for values: string, number, boolean and Date.  // trigger custom event $screeb('event.track', 'Product added to cart', { product_name: 'Red bike 2021', category: 'sport', color: 'red', price: 299, count: 1, reference: '2CF093TG1', delivery_method: 'UPS', user_logged: false, added_at: new Date(), });  ","version":null,"tagName":"h2"},{"title":"Hooks","type":0,"sectionRef":"#","url":"/sdk-android/android-hooks","content":"","keywords":"","version":null},{"title":"Set hooks​","type":1,"pageTitle":"Hooks","url":"/sdk-android/android-hooks#set-hooks","content":" You can define custom hooks to be executed on various events.  Thanks to this you will be able to interact with your website when a survey appears, or execute some custom code when a survey is submitted.  You can define hooks on Screeb.initSdk() and Screeb.startSurvey() commands. Hooks are all optional.  Available hooks are:  onSurveyShowed: called when a survey is showedonSurveyStarted: called when a survey is startedonQuestionReplied: called when a question is repliedonSurveyCompleted: called when a survey is completedonSurveyHidden: called when a survey is hiddenonReady: called when the SDK is ready (Only available on Screeb.initSdk())  ","version":null,"tagName":"h2"},{"title":"Set hooks on SDK init​","type":1,"pageTitle":"Hooks","url":"/sdk-android/android-hooks#set-hooks-on-sdk-init","content":" Screeb.initSdk(this, &quot;&lt;android-channel-id&gt;&quot;, &quot;&lt;unique-user-id&gt;&quot;, // optional VisitorProperties().apply { // optional this[&quot;firstname&quot;] = &quot;&lt;user-firstname&gt;&quot; this[&quot;lastname&quot;] = &quot;&lt;user-lastname&gt;&quot; this[&quot;plan&quot;] = &quot;&lt;user-plan&gt;&quot; this[&quot;age&quot;] = 42 this[&quot;logged_at&quot;] = Date() this[&quot;authenticated&quot;] = true }, InitOptions( isFullscreenMode = true|false, // fullscreen mode, optional, default: false automaticScreenDetection = true|false // optional, default: false ), hashMapOf( &quot;version&quot; to &quot;1.0.0&quot;, &quot;onReady&quot; to { payload:Any -&gt; Log.d(&quot;Screeb&quot;, &quot;SDK Ready: $payload&quot;)} ) )   ","version":null,"tagName":"h3"},{"title":"Set hooks on survey start​","type":1,"pageTitle":"Hooks","url":"/sdk-android/android-hooks#set-hooks-on-survey-start","content":" Screeb.startSurvey( surveyId = &quot;&lt;survey-id&gt;&quot;, allowMultipleResponses = true, hiddenFields = HiddenFields().apply { this[&quot;h1&quot;] = &quot;hidden_field1&quot; this[&quot;h_count&quot;] = 75 }, hashMapOf( &quot;version&quot; to &quot;1.0.0&quot;, &quot;onSurveyShowed&quot; to { payload:Any -&gt; Log.d(&quot;Screeb&quot;, &quot;Survey showed $payload&quot;)} ) )   ","version":null,"tagName":"h3"},{"title":"Payload types​","type":1,"pageTitle":"Hooks","url":"/sdk-android/android-hooks#payload-types","content":" onSurveyShowed: { channel: { id: string, type: &quot;android&quot; }, survey: { id: string, survey_position: &quot;center-left&quot; | &quot;center-center&quot; | &quot;center-right&quot; | &quot;bottom-left&quot; | &quot;bottom-center&quot; | &quot;bottom-right&quot;, survey_size: 25 | 50 | 75 | 100 | 125 | 150, survey_format: &quot;conversational&quot; | &quot;cards&quot;, }, response: { id: string, items: { question: { id: string; title: string; type: &quot;text&quot; | &quot;video&quot;; url: string; }; answer: { fields: { type: &quot;string&quot; | &quot;number&quot; | &quot;boolean&quot; | &quot;none&quot; | &quot;time&quot; | &quot;url&quot;; }, text: string; number: number; boolean: boolean; time: Date; url: string; }[] | undefined; replied_at: Date | undefined; }[]; }, user: { anonymous_id: string, user_id: string, } } onSurveyStarted: { channel: { id: string, type: &quot;android&quot; }, survey: { id: string, survey_position: &quot;center-left&quot; | &quot;center-center&quot; | &quot;center-right&quot; | &quot;bottom-left&quot; | &quot;bottom-center&quot; | &quot;bottom-right&quot;, survey_size: 25 | 50 | 75 | 100 | 125 | 150, survey_format: &quot;conversational&quot; | &quot;cards&quot;, }, response: { id: string, }, user: { anonymous_id: string, user_id: string, } } onQuestionReplied: { channel: { id: string, type: &quot;android&quot; }, survey: { id: string, survey_position: &quot;center-left&quot; | &quot;center-center&quot; | &quot;center-right&quot; | &quot;bottom-left&quot; | &quot;bottom-center&quot; | &quot;bottom-right&quot;, survey_size: 25 | 50 | 75 | 100 | 125 | 150, survey_format: &quot;conversational&quot; | &quot;cards&quot;, }, response: { id: string, status: &quot;started&quot; | &quot;ended&quot; | &quot;closed&quot; | &quot;interrupted&quot; question: { id: string; title: string; type: &quot;text&quot; | &quot;video&quot;; url: string; }; answer: { fields: { type: &quot;string&quot; | &quot;number&quot; | &quot;boolean&quot; | &quot;none&quot; | &quot;time&quot; | &quot;url&quot;; }, text: string; number: number; boolean: boolean; time: Date; url: string; }; items: { question: { id: string; title: string; type: &quot;text&quot; | &quot;video&quot;; url: string; }; answer: { fields: { type: &quot;string&quot; | &quot;number&quot; | &quot;boolean&quot; | &quot;none&quot; | &quot;time&quot; | &quot;url&quot;; }, text: string; number: number; boolean: boolean; time: Date; url: string; }[] | undefined; replied_at: Date | undefined; }[]; }, user: { anonymous_id: string, user_id: string, } } onSurveyCompleted: { channel: { id: string, type: &quot;android&quot; }, survey: { id: string, survey_position: &quot;center-left&quot; | &quot;center-center&quot; | &quot;center-right&quot; | &quot;bottom-left&quot; | &quot;bottom-center&quot; | &quot;bottom-right&quot;, survey_size: 25 | 50 | 75 | 100 | 125 | 150, survey_format: &quot;conversational&quot; | &quot;cards&quot;, }, response: { id: string, items: { question: { id: string; title: string; type: &quot;text&quot; | &quot;video&quot;; url: string; }; answer: { fields: { type: &quot;string&quot; | &quot;number&quot; | &quot;boolean&quot; | &quot;none&quot; | &quot;time&quot; | &quot;url&quot;; }, text: string; number: number; boolean: boolean; time: Date; url: string; }[] | undefined; replied_at: Date | undefined; }[]; }, user: { anonymous_id: string, user_id: string, } } onSurveyHidden: { channel: { id: string, type: &quot;android&quot; }, survey: { id: string, survey_position: &quot;center-left&quot; | &quot;center-center&quot; | &quot;center-right&quot; | &quot;bottom-left&quot; | &quot;bottom-center&quot; | &quot;bottom-right&quot;, survey_size: 25 | 50 | 75 | 100 | 125 | 150, survey_format: &quot;conversational&quot; | &quot;cards&quot;, }, response: { id: string, hide_reason: &quot;started&quot; | &quot;ended&quot; | &quot;closed&quot; | &quot;interrupted&quot;, items: { question: { id: string; title: string; type: &quot;text&quot; | &quot;video&quot;; url: string; }; answer: { fields: { type: &quot;string&quot; | &quot;number&quot; | &quot;boolean&quot; | &quot;none&quot; | &quot;time&quot; | &quot;url&quot;; }, text: string; number: number; boolean: boolean; time: Date; url: string; }[] | undefined; replied_at: Date | undefined; }[]; }, user: { anonymous_id: string, user_id: string, } } onReady: { channel: { id: string, type: &quot;android&quot; }, user: { anonymous_id: string, user_id: string, } }  ","version":null,"tagName":"h3"},{"title":"Push notifications","type":0,"sectionRef":"#","url":"/sdk-ios/push-notifications","content":"","keywords":"","version":null},{"title":"Configuring the push notification​","type":1,"pageTitle":"Push notifications","url":"/sdk-ios/push-notifications#configuring-the-push-notification","content":" Create a new campaign in your notification service admin (ex: Firebase) and prepare the content of the notification : title, body, target and scheduling.  To configure the payload, add a custom data (in the &quot;Additional options&quot; section for Firebase). For example, you can specify a key value like this   &quot;screeb&quot; : &quot;YOUR SURVEY ID&quot;  Then, launch the campaign.  ","version":null,"tagName":"h2"},{"title":"Foreground mode​","type":1,"pageTitle":"Push notifications","url":"/sdk-ios/push-notifications#foreground-mode","content":" To receive the push messages payload when the app is in foreground with Firebase, you must configure a UNUserNotificationCenterDelegate delegate and implement this function :  extension AppDelegate: UNUserNotificationCenterDelegate { func userNotificationCenter( _ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -&gt; Void ) { process(response.notification) completionHandler() } // ... }   The function process described below uses the survey id to start the survey   private func process(_ notification: UNNotification) { let userInfo = notification.request.content.userInfo if let surveyId = userInfo[&quot;screeb&quot;] as? String { Screeb.startSurvey(surveyId: surveyId) } }   NB : Don't forget to declare this delegate in your application function of your AppDelegate class :  UNUserNotificationCenter.current().delegate = self   ","version":null,"tagName":"h2"},{"title":"Background mode​","type":1,"pageTitle":"Push notifications","url":"/sdk-ios/push-notifications#background-mode","content":" When an app is in background, a notification is typically displayed by your push framework. When the user tap on the notification, it opens the app with the data that contains the payload you have previously configured.  Then you can get the Screeb id to start a survey in the controller that has been started.  extension AppDelegate: UNUserNotificationCenterDelegate { func userNotificationCenter( _ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -&gt; Void ) { process(notification) if #available(iOS 14.0, *) { completionHandler([[.banner, .sound]]) } else { // Fallback on earlier versions } } // ... }  ","version":null,"tagName":"h2"},{"title":"Install","type":0,"sectionRef":"#","url":"/sdk-ios/install","content":"","keywords":"","version":null},{"title":"How to install the iOS SDK in your app?​","type":1,"pageTitle":"Install","url":"/sdk-ios/install#how-to-install-the-ios-sdk-in-your-app","content":" See the example to install the last version of the Screeb SDK dependency in a native iOS app.  You can find here useful information if you are using one of these technologies:  Flutter: Releases - sources - exampleReact Native: Releases - sources - example    ","version":null,"tagName":"h2"},{"title":"Screeb SDK Usage in CI Environments​","type":1,"pageTitle":"Install","url":"/sdk-ios/install#screeb-sdk-usage-in-ci-environments","content":" Please note that if you are utilizing a Continuous Integration (CI) system, it is advisable to deactivate the Screeb SDK during CI execution. This precaution helps prevent the creation of numerous new anonymous users and potential exceedance of your MTU limit.  ","version":null,"tagName":"h2"},{"title":"Technical requirements​","type":1,"pageTitle":"Install","url":"/sdk-ios/install#technical-requirements","content":" The Screeb SDK is configured to work with iOS version 11.0 minimum.  The Swift version is &gt;= v5.5.2 and XCode version &gt;= 13.2.1.  The size of the SDK is approximately 198 KB.  The SDK also need theses permissions if you want to use the Screeb Audio/Video feature.  &lt;key&gt;NSCameraUsageDescription&lt;/key&gt; &lt;string&gt;This app needs access to the camera to take photos.&lt;/string&gt; &lt;key&gt;NSMicrophoneUsageDescription&lt;/key&gt; &lt;string&gt;This app needs access to microphone to record audio.&lt;/string&gt; &lt;key&gt;UISupportedInterfaceOrientations&lt;/key&gt;   ","version":null,"tagName":"h2"},{"title":"How to configure the iOS SDK in your app?​","type":1,"pageTitle":"Install","url":"/sdk-ios/install#how-to-configure-the-ios-sdk-in-your-app","content":" First, log in to the Screeb application, then create your first survey.  When your survey is ready to share, we will provide a Swift snippet to copy into the scene() function of the SceneDelegate protocol. If your application doesn't use a SceneDelegate, you should place the snippet in AppDelegate instead. If your application is using SwiftUI lifecycle without an AppDelegate then you can try to access rootViewController this way:https://developer.apple.com/forums/thread/695115  ","version":null,"tagName":"h2"},{"title":"Add Screeb to dependencies:​","type":1,"pageTitle":"Install","url":"/sdk-ios/install#add-screeb-to-dependencies","content":" Using Cocoapods​  To install the sdk, you just need to add the following lines in your project Podfile file :  pod &quot;Screeb&quot;, &quot;x.x.x&quot;   Using Swift Package Manager​  To install the sdk, you just need to add the following lines in your project Package.swift file :  dependencies: [ .package(url: &quot;https://github.com/ScreebApp/sdk-ios-public&quot;, .upToNextMajor(from: &quot;x.x.x&quot;)) ]   You can also do it from Xcode:  Go to File &gt; Add Packages...In the top right corner paste the project URL: https://github.com/ScreebApp/sdk-ios-publicClick Next and select the version you want to use  ","version":null,"tagName":"h3"},{"title":"Setup the SDK​","type":1,"pageTitle":"Install","url":"/sdk-ios/install#setup-the-sdk","content":" // Initialization using SceneDelegate class SceneDelegate: UIResponder, UIWindowSceneDelegate { // [..] func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) { Screeb.initSdk( context: nil, channelId: &quot;&lt;ios-channel-id&gt;&quot;, identity: &quot;&lt;user-id&gt;&quot;, // optional visitorProperty: [&quot;age&quot;: AnyEncodable(12), &quot;name&quot;: AnyEncodable(&quot;JohnDoe&quot;)], // optional initOptions: InitOptions(automaticScreenDetection: true|false) // optional ) guard let _ = (scene as? UIWindowScene) else { return } } // [..] }   Or:  // Initialization using AppDelegate @UIApplicationMain class AppDelegate: UIResponder, UIApplicationDelegate { // [..] func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool { Screeb.initSdk( context: nil, channelId: &quot;&lt;ios-channel-id&gt;&quot;, identity: &quot;&lt;user-id&gt;&quot;, // optional visitorProperty: [&quot;age&quot;: AnyEncodable(12), &quot;name&quot;: AnyEncodable(&quot;JohnDoe&quot;)], // optional initOptions: InitOptions(automaticScreenDetection: true|false) // optional ) return true } // [..] }   ","version":null,"tagName":"h3"},{"title":"About SDK lifecycle​","type":1,"pageTitle":"Install","url":"/sdk-ios/install#about-sdk-lifecycle","content":" At any time, you can disable the Screeb SDK with the following command:  Screeb.close()   ","version":null,"tagName":"h2"},{"title":"Next steps​","type":1,"pageTitle":"Install","url":"/sdk-ios/install#next-steps","content":" ","version":null,"tagName":"h2"},{"title":"1- Identify visitors​","type":1,"pageTitle":"Install","url":"/sdk-ios/install#1--identify-visitors","content":" See here.  ","version":null,"tagName":"h3"},{"title":"2- Event tracking​","type":1,"pageTitle":"Install","url":"/sdk-ios/install#2--event-tracking","content":" See here.  ","version":null,"tagName":"h3"},{"title":"3- Screen tracking​","type":1,"pageTitle":"Install","url":"/sdk-ios/install#3--screen-tracking","content":" See here.  ","version":null,"tagName":"h3"},{"title":"4- Start the survey programmatically​","type":1,"pageTitle":"Install","url":"/sdk-ios/install#4--start-the-survey-programmatically","content":" See here.  ","version":null,"tagName":"h3"},{"title":"SDK dependencies​","type":1,"pageTitle":"Install","url":"/sdk-ios/install#sdk-dependencies","content":" The iOS SDK does not have any external dependencies from version 2.0.0 onwards. ","version":null,"tagName":"h2"},{"title":"Group assignation","type":0,"sectionRef":"#","url":"/sdk-js/group-assignation","content":"","keywords":"","version":null},{"title":"Default group type​","type":1,"pageTitle":"Group assignation","url":"/sdk-js/group-assignation#default-group-type","content":" Group type can be omitted:  $screeb('identity.group.assign', null, 'cohort-42');   From the Screeb platform, to customize the conditions the surveys are displayed for a visitor, you can apply custom targeting rules using group membership.  ","version":null,"tagName":"h3"},{"title":"Group name vs group id​","type":1,"pageTitle":"Group assignation","url":"/sdk-js/group-assignation#group-name-vs-group-id","content":" It is recommended to identify groups by using an immutable group id instead of a group name.  $screeb('identity.group.unassign', 'company', 'nuR4eecu', { name: 'Apple' });   ","version":null,"tagName":"h3"},{"title":"Unassign group​","type":1,"pageTitle":"Group assignation","url":"/sdk-js/group-assignation#unassign-group","content":" At any time, you can unassign a user from a segment.  $screeb('identity.group.unassign', 'company', 'Apple');   ","version":null,"tagName":"h3"},{"title":"Attributes​","type":1,"pageTitle":"Group assignation","url":"/sdk-js/group-assignation#attributes","content":" In order to bring context to your event handling, some properties can be added to the event.  Requirements:  Property names must be limited to 128 charactersNo more than 1000 attributesSupported types for values: string, number, boolean and Date.  // trigger custom event $screeb('identity.group.assign', 'company', 'Apple', { address_line_1: 'Apple Campus', address_line_2: '1 Infinite Loop', city: 'Cupertino', zipcode: 95014, state: 'California', country: 'United states', });  ","version":null,"tagName":"h2"},{"title":"Reference","type":0,"sectionRef":"#","url":"/sdk-ios/reference","content":"","keywords":"","version":null},{"title":"Introduction​","type":1,"pageTitle":"Reference","url":"/sdk-ios/reference#introduction","content":" The reference is your key to a comprehensive understanding of the Screeb IOS SDK.  ✨ If this is your first look at the documentation, we recommend beginning with the Getting started guide.  ","version":null,"tagName":"h2"},{"title":"Screeb methods​","type":1,"pageTitle":"Reference","url":"/sdk-ios/reference#screeb-methods","content":" After installing the Screeb IOS SDK in your mobile application, you will have access to the Screeb module. Screeb methods are executed sequentially.  Use the following syntaxt: Screeb.method(argument1, argument2, ...).  Method\tDefinition\tMoreinitSdk\tThe initSdk method starts the SDK and associates the current session to your Screeb project. Your IOS identifier must be passed. Optionally, this method can identify the current user. If no user identifier is provided, an anonymous visitor session is created. You will able to later change the current user by using the identity method.\t👉 closeSdk\tThe closeSdk method shutdowns the Screeb SDK. It is the opposite to initSdk.\t👉 setIdentity\tThe setIdentity method tells Screeb who the current user is. When Screeb is only installed on the logged page, please identify users using the initSdk method instead. This method allows identifying users lazily, on user login.\t👉 resetIdentity\tThe resetIdentity method tells Screeb to reset the current user session and switch to an anonymous user. Please note it won't disable the IOS SDK until you call the closeSdk command.\t👉 visitorProperty\tThe visitorProperty method associates some contextual properties to the current user session. You will be able to personalize surveys and target questions to the right audience.\t👉 assignGroup\tThe assignGroup method assigns the current user to a Screeb segment. Some properties can be passed to the method to contextualize the segment.\t👉 unassignGroup\tThe unassignGroup method unassigns the current user from a Screeb segment.\t👉 trackEvent\tThe trackEvent method tracks actions performed by current user, along with properties describing the event.\t👉 trackScreen\tThe trackScreen method tracks the screen/view of the current user, along with properties describing the event.\t👉 startSurvey\tThe startSurvey method starts a survey by providing its id. Optionally, this command can prevent a user to see a single survey multiple times. Please note that running a survey using startSurvey will require a developer: to be autonomous, use the Screeb targeting engine instead.\t👉 debug\tThe debug method prints the current configuration of Screeb SDK, with website id, user id, session duration...\t👉 debugTargeting\tThe debugTargeting method prints the status of each targeting rule for each survey of your account.\t👉 ","version":null,"tagName":"h2"},{"title":"Reference","type":0,"sectionRef":"#","url":"/sdk-js/reference","content":"","keywords":"","version":null},{"title":"Introduction​","type":1,"pageTitle":"Reference","url":"/sdk-js/reference#introduction","content":" The reference is your key to a comprehensive understanding of the Screeb Javascript SDK.  ✨ If this is your first look at the documentation, we recommend beginning with the Getting started guide.  ","version":null,"tagName":"h2"},{"title":"$screeb methods​","type":1,"pageTitle":"Reference","url":"/sdk-js/reference#screeb-methods","content":" After injecting the Screeb Javascript SDK in your website, you will have access to a global $screeb object. $screeb methods are executed sequentially and return a Promise.  Use the following syntaxt: $screeb(method, argument1, argument2, ...).  Method\tDefinition\tMoreinit\tThe init method starts the SDK and associates the current session to your Screeb project. Your website identifier must be passed. Optionally, this method can identify the current user. If no user identifier is provided, an anonymous visitor session is created. You will able to later change the current user by using the identity method.\t👉 close\tThe close method shutdowns the Screeb SDK. It is the opposite to init.\t👉 debug\tThe debug method prints the current configuration of Screeb SDK, with website id, user id, session duration...\t👉 identity\tThe identity method tells Screeb who the current user is. When Screeb is only installed on the logged page, please identify users using the init method instead. If your website has public pages, this method allows identifying users lazily, on user login.\t👉 identity.properties\tThe identity.properties method associates some contextual properties to the current user session. You will be able to personalize surveys and target questions to the right audience.\t👉 identity.group.assign\tThe identity.group.assign method assigns the current user to a Screeb segment. Some properties can be passed to the method to contextualize the segment.\t👉 identity.group.unassign\tThe identity.group.unassign method unassigns the current user from a Screeb segment.\t👉 identity.reset\tThe identity.reset method tells Screeb to reset the current user session and switch to an anonymous user. Please note it won't disable the Javascript SDK until you call the close command.\t👉 identity.get\tThe identity.get method allows you to retrieve the current user identity.\t👉 event.track\tThe event.track method tracks actions performed by current users, along with properties describing the event.\t👉 survey.start\tThe survey.start method starts a survey by providing its id. Optionally, this command can prevent a user to see a single survey multiple times. Please note that running a survey using survey.start will require a developer: to be autonomous, use the Screeb targeting engine instead.\t👉 survey.close\tThe survey.close method interrupts a survey.\t👉 targeting.debug\tThe targeting.debug method prints the status of each targeting rule for each survey of your account.\t👉 ","version":null,"tagName":"h2"},{"title":"Troubleshooting","type":0,"sectionRef":"#","url":"/sdk-js/troubleshooting","content":"","keywords":"","version":null},{"title":"Check if Javascript tag is loaded correctly​","type":1,"pageTitle":"Troubleshooting","url":"/sdk-js/troubleshooting#check-if-javascript-tag-is-loaded-correctly","content":" Open the developer console and call the following Screeb command: $screeb('debug');.  You will get contextual information about the running user session:    ","version":null,"tagName":"h2"},{"title":"Error cases​","type":1,"pageTitle":"Troubleshooting","url":"/sdk-js/troubleshooting#error-cases","content":" The error Uncaught ReferenceError: $screeb is not defined means the Javascript Tag was not injected into the page.An empty channel id means you didn't call the $screeb('init', ...) command.An empty respondent id means you exceeded your respondent quota.  ","version":null,"tagName":"h3"},{"title":"Debug targeting rules​","type":1,"pageTitle":"Troubleshooting","url":"/sdk-js/troubleshooting#debug-targeting-rules","content":" Since the targeting engine built by Screeb runs in the background, you may not understand which rules prevent your survey from being displayed to a user.  Open the developer console and call the following Screeb command: $screeb('targeting.debug');.  You will get a list of available surveys and the associated targeting rules:    The rules with a green dot 🟢 are the ones that have been validated for this user. The rules with a red dot 🔴 are not validated and may be the reason why your survey is not displayed.  ","version":null,"tagName":"h2"},{"title":"Content Security Policy (CSP)​","type":1,"pageTitle":"Troubleshooting","url":"/sdk-js/troubleshooting#content-security-policy-csp","content":" You want to display Screeb surveys while being sure your app is secured and protected against injection attacks, here's how to make Screeb compatible with your Content Security Policy (CSP).  Your CSP should -at least- look like this:  default-src 'unsafe-inline' https://*.screeb.app wss://*.screeb.app; prefetch-src https://*.screeb.app; font-src blob:   And don't forget to add your own domains.  An example:  content-security-policy: default-src https: 'unsafe-eval' 'unsafe-inline' https://*.screeb.app wss://*.screeb.app; object-src 'self'; report-uri /csp-violation-report; frame-ancestors 'self' https://admin.example.com https://vip.example.com; prefetch-src https://*.screeb.app; font-src blob:  ","version":null,"tagName":"h2"},{"title":"Start survey programmatically","type":0,"sectionRef":"#","url":"/sdk-js/start-survey-programmatically","content":"","keywords":"","version":null},{"title":"How to start a survey programmatically?​","type":1,"pageTitle":"Start survey programmatically","url":"/sdk-js/start-survey-programmatically#how-to-start-a-survey-programmatically","content":" In most cases, you should let the Screeb targeting engine start the survey. But sometimes, you may need more control on survey trigger time.  This method is often used for adding feedback button into a menu.  $screeb('survey.start', '&lt;SURVEY_ID&gt;');   ","version":null,"tagName":"h2"},{"title":"Prevent multiple displays?​","type":1,"pageTitle":"Start survey programmatically","url":"/sdk-js/start-survey-programmatically#prevent-multiple-displays","content":" If current user already replied to your survey and you would rather not display it many times, please add the allow_multiple_responses argument:  $screeb('survey.start', '&lt;SURVEY_ID&gt;', { 'allow_multiple_responses': false });   ","version":null,"tagName":"h2"},{"title":"Contextualize response​","type":1,"pageTitle":"Start survey programmatically","url":"/sdk-js/start-survey-programmatically#contextualize-response","content":" The survey.start command accepts an object of hidden fields. Values passed as parameters will be listed alongside the responses, on the Screeb platform.  $screeb('survey.start', '&lt;SURVEY_ID&gt;', { 'hidden_fields': { 'color': 'green', 'article_id': 42 } });  ","version":null,"tagName":"h2"},{"title":"Screen tracking","type":0,"sectionRef":"#","url":"/sdk-ios/screen-tracking","content":"","keywords":"","version":null},{"title":"Attributes​","type":1,"pageTitle":"Screen tracking","url":"/sdk-ios/screen-tracking#attributes","content":" In order to bring context to your event handling, some properties can be added to the screen.  Requirements:  Property names must be limited to 128 charactersNo more than 1000 attributesSupported types for values: string, number (Int, Long, Double), boolean and Date.  // screen tracking with custom properties Screeb.trackScreen(name: &quot;ProductCartFragment&quot;, trackingEventProperties: [ &quot;product_name&quot;: AnyEncodable(&quot;Red bike 2021&quot;), &quot;category&quot; = AnyEncodable(&quot;sport&quot;), &quot;price&quot; = AnyEncodable(12.29), &quot;count&quot; = AnyEncodable(1), &quot;delivery_method&quot; = AnyEncodable(&quot;UPS&quot;), &quot;user_logged&quot; = AnyEncodable(false), &quot;added_at&quot; = AnyEncodable(Date()) ])  ","version":null,"tagName":"h2"},{"title":"Group assignation","type":0,"sectionRef":"#","url":"/sdk-react-native/group-assignation","content":"","keywords":"","version":null},{"title":"Default group type​","type":1,"pageTitle":"Group assignation","url":"/sdk-react-native/group-assignation#default-group-type","content":" Group type can be omitted:  import { assignGroup, unassignGroup } from &quot;@screeb/react-native&quot;; assignGroup(null, &quot;cohort-42&quot;);   From the Screeb platform, to customize the conditions the surveys are displayed for a visitor, you can apply custom targeting rules using group membership.  ","version":null,"tagName":"h3"},{"title":"Group name vs group id​","type":1,"pageTitle":"Group assignation","url":"/sdk-react-native/group-assignation#group-name-vs-group-id","content":" It is recommended to identify groups by using an immutable group id instead of a group name.  import { assignGroup, unassignGroup } from &quot;@screeb/react-native&quot;; assignGroup(&quot;company&quot;, &quot;nuR4eecu&quot;, { name: &quot;Apple&quot; });   ","version":null,"tagName":"h3"},{"title":"Unassign group​","type":1,"pageTitle":"Group assignation","url":"/sdk-react-native/group-assignation#unassign-group","content":" At any time, you can unassign a user from a segment;  import { assignGroup, unassignGroup } from &quot;@screeb/react-native&quot;; unassignGroup(null, &quot;cohort-42&quot;);   ","version":null,"tagName":"h3"},{"title":"Attributes​","type":1,"pageTitle":"Group assignation","url":"/sdk-react-native/group-assignation#attributes","content":" In order to bring context to your event handling, some properties can be added to the event.  Requirements:  Property names must be limited to 128 charactersNo more than 1000 attributesSupported types for values: string, number, boolean and Date.  import { assignGroup, unassignGroup } from &quot;@screeb/react-native&quot;; assignGroup(&quot;company&quot;, &quot;nuR4eecu&quot;, { name: &quot;Apple&quot;, employes: &quot;100.000+&quot;, })  ","version":null,"tagName":"h2"},{"title":"Event tracking","type":0,"sectionRef":"#","url":"/sdk-react-native/event-tracking","content":"","keywords":"","version":null},{"title":"Attributes​","type":1,"pageTitle":"Event tracking","url":"/sdk-react-native/event-tracking#attributes","content":" In order to bring context to your event handling, some properties can be added to the event.  Requirements:  Property names must be limited to 128 charactersNo more than 1000 attributesSupported types for values: string, number (Int, Long, Double), boolean and Date.  import { trackEvent } from &quot;@screeb/react-native&quot;; // trigger custom event trackEvent(&quot;Product added to cart&quot;, { product_name: &quot;Red bike 2021&quot;, category: &quot;sport&quot;, price: 12.29, count: 1, delivery_method: &quot;UPS&quot;, user_logged: false, added_at: new Date(), })  ","version":null,"tagName":"h2"},{"title":"Screen tracking","type":0,"sectionRef":"#","url":"/sdk-react-native/screen-tracking","content":"","keywords":"","version":null},{"title":"Attributes​","type":1,"pageTitle":"Screen tracking","url":"/sdk-react-native/screen-tracking#attributes","content":" In order to bring context to your event handling, some properties can be added to the screen.  Requirements:  Property names must be limited to 128 charactersNo more than 1000 attributesSupported types for values: string, number (Int, Long, Double), boolean and Date.  import { trackScreen } from &quot;@screeb/react-native&quot;; // screen tracking with custom properties trackScreen('MyHomeScreen', { 'example-prop1': false, 'example-prop2': 29, 'example-prop3' : 'iPhone 13', });  ","version":null,"tagName":"h2"},{"title":"Identity","type":0,"sectionRef":"#","url":"/sdk-js/identity","content":"","keywords":"","version":null},{"title":"Set identity​","type":1,"pageTitle":"Identity","url":"/sdk-js/identity#set-identity","content":" On a logged page of your website, you won't be able to identify who responded to surveys until you call the identity command.  Thanks to this, you will be able to track this user over multiple platforms (desktop, mobile, tablet...).  The identifier of your website visitor must be unique and idempotent. User email is good, but can vary over time. We recommend using the user id.  Requirements:  The unique visitor id must have a length between 1 to 255 characters.  ","version":null,"tagName":"h2"},{"title":"Set identity on widget start​","type":1,"pageTitle":"Identity","url":"/sdk-js/identity#set-identity-on-widget-start","content":" If identity is empty, the last identity will be used. If the Javascript widget is loaded for the first time, an anonymous identity will be created instead.  $screeb('init', '&lt;website-id&gt;', { identity: { // Assign current session to a visitor identifier, // such as your internal id, an email address... id: '&lt;unique-visitor-id&gt;', // Set visitor properties (optional) properties: { firstname: '&lt;user-firstname&gt;', lastname: '&lt;user-lastname&gt;', plan: '&lt;user-plan&gt;', last_seen_at: new Date(), authenticated: true, } } });   ","version":null,"tagName":"h3"},{"title":"Set identity later​","type":1,"pageTitle":"Identity","url":"/sdk-js/identity#set-identity-later","content":" You can change the current visitor identity at any time. Running surveys will be closed.  // assign current session to a visitor identifier (such as your internal user id, an email address...) $screeb('identity', '&lt;unique-visitor-id&gt;');   ","version":null,"tagName":"h3"},{"title":"Reset current identity​","type":1,"pageTitle":"Identity","url":"/sdk-js/identity#reset-current-identity","content":" When the user logs out, please call the reset command.  This command must be called only once, since it creates a new identity on Screeb side. If you call it on every anonymous page, you won't be able to track visitor navigation and surveys will be sent many times to the same visitor.  $screeb('identity.reset');   ","version":null,"tagName":"h3"},{"title":"Attributes​","type":1,"pageTitle":"Identity","url":"/sdk-js/identity#attributes","content":" Screeb allows tracking some custom data about your website visitors. Those properties can be inserted as &quot;hidden fields&quot; in your surveys or can be used for an advanced targeting rule.  Requirements:  Property names must be limited to 128 charactersNo more than 1000 attributesSupported types for values: string, number, boolean and Date.  // set visitor properties $screeb('identity.properties', { email: 'samuel@screeb.app', age: 42, logged: true, signed_up_at: new Date(), }); // Delete visitor property : set values to null $screeb('identity.properties', { email: 'samuel@screeb.app', age: null, company: null, logged: true, });   identity and identity.properties can be executed in the same command:  // Last argument is optional $screeb('identity', '&lt;unique-visitor-id&gt;', { email: 'samuel@screeb.app', plan: 'growth-monthly' });   ","version":null,"tagName":"h2"},{"title":"Get current identity​","type":1,"pageTitle":"Identity","url":"/sdk-js/identity#get-current-identity","content":" You can get the current visitor identity at any time.  $screeb('identity.get').then(console.log); // { // channel_id: &quot;0e2b609a-8dce-4695-a80f-966fbfa87a88&quot;, // anonymous_id: &quot;30311998-5bc4-4cb7-8aca-d4189319b450&quot;, // generated by Screeb // user_id: &quot;user-42&quot;, // null if visitor has not been identified // is_ready: true, // false if screeb respondent is not initialised yet // session_id: &quot;eeba641a-f831-44cb-9d9e-5224ffc5b91b&quot;, // session_start: &quot;2023-02-01T17:07:50.097Z&quot;, // session_end: &quot;2023-02-01T17:32:57.632Z&quot; // }  ","version":null,"tagName":"h2"},{"title":"Start survey programmatically","type":0,"sectionRef":"#","url":"/sdk-react-native/start-survey-programmatically","content":"","keywords":"","version":null},{"title":"How to start a survey programmatically?​","type":1,"pageTitle":"Start survey programmatically","url":"/sdk-react-native/start-survey-programmatically#how-to-start-a-survey-programmatically","content":" In most cases, you should let the Screeb targeting engine start the survey. But sometimes, you may want to run a survey on user action.  import { startSurvey } from &quot;@screeb/react-native&quot;; startSurvey(&quot;&lt;survey-id&gt;&quot;);   You will find survey id in Screeb platform.  ","version":null,"tagName":"h2"},{"title":"Prevent multiple displays?​","type":1,"pageTitle":"Start survey programmatically","url":"/sdk-react-native/start-survey-programmatically#prevent-multiple-displays","content":" If current user already replied to your survey and you would rather not display it many times, please add the allowMultipleResponses argument:  import { startSurvey } from &quot;@screeb/react-native&quot;; startSurvey(&quot;&lt;survey-id&gt;&quot;, false);   ","version":null,"tagName":"h2"},{"title":"Contextualize response​","type":1,"pageTitle":"Start survey programmatically","url":"/sdk-react-native/start-survey-programmatically#contextualize-response","content":" The startSurvey command accepts a list of hidden fields. Values passed as parameters will be listed alongside the responses, on the Screeb platform.  import { startSurvey } from &quot;@screeb/react-native&quot;; startSurvey(&quot;&lt;survey-id&gt;&quot;, true, { color: &quot;red&quot;, size: 42 });  ","version":null,"tagName":"h2"},{"title":"Install","type":0,"sectionRef":"#","url":"/sdk-js/install","content":"","keywords":"","version":null},{"title":"How to add the Screeb tag to your website?​","type":1,"pageTitle":"Install","url":"/sdk-js/install#how-to-add-the-screeb-tag-to-your-website","content":" First, log in to the Screeb application, then create your first survey.  When your survey is ready to share, we will provide a javascript snippet to copy at the end of your HTML page (before &lt;/body&gt;).  Example:  &lt;script type=&quot;text/javascript&quot;&gt; (function (s,c,r,ee,b) { s['ScreebObject']=r;s[r]=s[r]||function(){var d=arguments;return new Promise(function(a,b){(s[r].q=s[r].q||[]).push({v:1,args:d,ok:a,ko:b})})}; b=c.createElement('script');b.type='text/javascript'; b.id=r;b.src=ee;b.async=1;c.getElementsByTagName(&quot;head&quot;)[0].appendChild(b); }(window,document,'$screeb','https://t.screeb.app/tag.js')); $screeb('init', '&lt;website-id&gt;'); &lt;/script&gt;   ","version":null,"tagName":"h2"},{"title":"About tag lifecycle​","type":1,"pageTitle":"Install","url":"/sdk-js/install#about-tag-lifecycle","content":" After the script tag is inserted into your page, you must call the init command, with your website ID (given in Screeb app). If no identity is specified, an anonymous Screeb session will be created (see identity section).  $screeb('init', '&lt;website-id&gt;');   At any time, you can disable the Screeb tag with the following command:  $screeb('close');   ","version":null,"tagName":"h3"},{"title":"Next steps​","type":1,"pageTitle":"Install","url":"/sdk-js/install#next-steps","content":" ","version":null,"tagName":"h2"},{"title":"1- Identify visitors​","type":1,"pageTitle":"Install","url":"/sdk-js/install#1--identify-visitors","content":" See here.  ","version":null,"tagName":"h3"},{"title":"2- Event tracking​","type":1,"pageTitle":"Install","url":"/sdk-js/install#2--event-tracking","content":" See here.  ","version":null,"tagName":"h3"},{"title":"3- Start the survey programmatically​","type":1,"pageTitle":"Install","url":"/sdk-js/install#3--start-the-survey-programmatically","content":" See here. ","version":null,"tagName":"h3"},{"title":"Identity","type":0,"sectionRef":"#","url":"/sdk-react-native/identity","content":"","keywords":"","version":null},{"title":"Set identity​","type":1,"pageTitle":"Identity","url":"/sdk-react-native/identity#set-identity","content":" When a user is identified in your app, you won't be able to identify who responded to surveys until you call the setIdentity command.  Thanks to this, you will be able to track this user over multiple platforms (desktop, mobile, tablet...).  The identifier of your website visitor must be unique and idempotent. User email is good, but can change over time. We recommend that you use the user id.  Requirements:  The unique visitor id must have a length between 1 to 255 characters.  import { setIdentity } from &quot;@screeb/react-native&quot;; setIdentity('&lt;user-id&gt;');   ","version":null,"tagName":"h2"},{"title":"Attributes​","type":1,"pageTitle":"Identity","url":"/sdk-react-native/identity#attributes","content":" Screeb allows tracking some custom data about your website visitors. Those properties can be inserted as &quot;hidden fields&quot; in your surveys or can be used for an advanced targeting rule.  Requirements:  Property names must be limited to 128 charactersNo more than 1000 attributesSupported types for values: string, number (Int, Long, Double), boolean and Date.  import { setIdentity, setProperties } from &quot;@screeb/react-native&quot;; // Set visitor properties setProperties({ 'example-prop1': false, 'example-prop2': 29, 'example-prop3': 'iPhone 13', }); // Delete visitor property: set values to null setProperties({ 'example-prop1': null, 'example-prop2': null, 'example-prop3': null, })  ","version":null,"tagName":"h2"},{"title":"Troubleshooting","type":0,"sectionRef":"#","url":"/sdk-react-native/troubleshooting","content":"","keywords":"","version":null},{"title":"Check if ReactNative SDK is initialized correctly​","type":1,"pageTitle":"Troubleshooting","url":"/sdk-react-native/troubleshooting#check-if-reactnative-sdk-is-initialized-correctly","content":" Call the following Screeb method from our SDK:  import { debug } from &quot;@screeb/react-native&quot;; debug();   You will get contextual information about the running user session in the native logs:    ","version":null,"tagName":"h2"},{"title":"Error cases​","type":1,"pageTitle":"Troubleshooting","url":"/sdk-react-native/troubleshooting#error-cases","content":" An empty channel id means you didn't call the initSdk method.An empty respondent id means you exceeded your respondent quota.  ","version":null,"tagName":"h3"},{"title":"Debug targeting rules​","type":1,"pageTitle":"Troubleshooting","url":"/sdk-react-native/troubleshooting#debug-targeting-rules","content":" Since the targeting engine built by Screeb runs in the background, you may not understand which rules prevent your survey from being displayed to a user.  Call the following Screeb method from our SDK:  import { debugTargeting } from &quot;@screeb/react-native&quot;; debugTargeting();   You will get a list of available surveys and the associated targeting rules in the native logs.    The rules with a green dot 🟢 are the ones that have been validated for this user. The rules with a red dot 🔴 are not validated and may be the reason why your survey is not displayed.  ","version":null,"tagName":"h2"},{"title":"iOS: \"Failed to build module 'Screeb'; this SDK is not supported by the compiler\"​","type":1,"pageTitle":"Troubleshooting","url":"/sdk-react-native/troubleshooting#ios-failed-to-build-module-screeb-this-sdk-is-not-supported-by-the-compiler","content":" ScreebModule.swift:1:8 Failed to build module 'Screeb'; this SDK is not supported by the compiler (the SDK is built with 'Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)', while this compiler is 'Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)'). Please select a toolchain which matches the SDK.   This compilation error is raised when support for library evolution is not enabled. Please add the following configuration to your Podfile:  post_install do |installer| installer.pods_project.targets.each do |target| target.build_configurations.each do |config| config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES' end end end   ","version":null,"tagName":"h2"},{"title":"iOS: \"Cannot load underlying module for 'Alamofire'\"​","type":1,"pageTitle":"Troubleshooting","url":"/sdk-react-native/troubleshooting#ios-cannot-load-underlying-module-for-alamofire","content":" ","version":null,"tagName":"h2"},{"title":"Option 1​","type":1,"pageTitle":"Troubleshooting","url":"/sdk-react-native/troubleshooting#option-1","content":" target 'abcdProject' do [...] use_frameworks! [...] end   You will also need to desactivate flipper. If you can't desactivate flipper check Option 2.  ","version":null,"tagName":"h3"},{"title":"Option 2​","type":1,"pageTitle":"Troubleshooting","url":"/sdk-react-native/troubleshooting#option-2","content":" Install the cocoapods-user-defined-build-types plugin:  sudo gem install cocoapods-user-defined-build-types   Then add the following lines to your Podfile:  plugin 'cocoapods-user-defined-build-types' enable_user_defined_build_types! [...] target 'abcdProject' do [...] pod &quot;Screeb&quot;, :build_type =&gt; :dynamic_framework [...] end  ","version":null,"tagName":"h3"},{"title":"Examples","type":0,"sectionRef":"#","url":"/sdk-js/examples","content":"","keywords":"","version":null},{"title":"1- Start Screeb tag​","type":1,"pageTitle":"Examples","url":"/sdk-js/examples#1--start-screeb-tag","content":" &lt;script type=&quot;text/javascript&quot;&gt; (function (s,c,r,ee,b) { s['ScreebObject']=r;s[r]=s[r]||function(){(s[r].q=s[r].q||[]).push(arguments)}; b=c.createElement('script');b.type='text/javascript'; b.id=r;b.src=ee;b.async=1;c.getElementsByTagName(&quot;head&quot;)[0].appendChild(b); }(window,document,'$screeb','https://t.screeb.app/tag.js')); // start Screeb tag, with website ID $screeb('init', 'c796994e-f2dd-41c5-a88c-91d54fc42b0e'); &lt;/script&gt;   ","version":null,"tagName":"h2"},{"title":"2- Authenticated page​","type":1,"pageTitle":"Examples","url":"/sdk-js/examples#2--authenticated-page","content":" Assuming your application uses the following session object:  var session = { &quot;user_id&quot;: &quot;16813&quot;, &quot;email&quot;: &quot;samuel@example.com&quot;, &quot;firstname&quot;: &quot;Samuel&quot;, &quot;lastname&quot;: &quot;Berthe&quot;, &quot;plan&quot;: &quot;growth&quot;, &quot;created_at&quot;: new Date(), };   &lt;script type=&quot;text/javascript&quot;&gt; (function (s,c,r,ee,b) { s['ScreebObject']=r;s[r]=s[r]||function(){(s[r].q=s[r].q||[]).push(arguments)}; b=c.createElement('script');b.type='text/javascript'; b.id=r;b.src=ee;b.async=1;c.getElementsByTagName(&quot;head&quot;)[0].appendChild(b); }(window,document,'$screeb','https://t.screeb.app/tag.js')); // start Screeb tag, with website ID $screeb('init', 'c796994e-f2dd-41c5-a88c-91d54fc42b0e', { &quot;identity&quot;: { &quot;id&quot;: session.user_id, &quot;properties&quot;: { &quot;email&quot;: session.email, &quot;firstname&quot;: session.firstname, &quot;lastname&quot;: session.lastname, &quot;plan&quot;: session.plan, &quot;logged&quot;: true, &quot;signed_up_at&quot;: session.created_at, } } }); &lt;/script&gt;   ","version":null,"tagName":"h2"},{"title":"3- On login​","type":1,"pageTitle":"Examples","url":"/sdk-js/examples#3--on-login","content":" Before login:  &lt;script type=&quot;text/javascript&quot;&gt; (function (s,c,r,ee,b) { s['ScreebObject']=r;s[r]=s[r]||function(){(s[r].q=s[r].q||[]).push(arguments)}; b=c.createElement('script');b.type='text/javascript'; b.id=r;b.src=ee;b.async=1;c.getElementsByTagName(&quot;head&quot;)[0].appendChild(b); }(window,document,'$screeb','https://t.screeb.app/tag.js')); // start Screeb tag, with website ID $screeb('init', 'c796994e-f2dd-41c5-a88c-91d54fc42b0e'); &lt;/script&gt;   Assuming your application uses the following session object:  var session = { &quot;user_id&quot;: &quot;16813&quot;, &quot;email&quot;: &quot;samuel@example.com&quot;, &quot;firstname&quot;: &quot;Samuel&quot;, &quot;lastname&quot;: &quot;Berthe&quot;, &quot;plan&quot;: &quot;growth&quot;, &quot;created_at&quot;: new Date(), };   After login validation:  // identify the current session $screeb('identity', session.user_id); // collect data about the current visitor $screeb('identity.properties', { 'email': session.email, 'firstname': session.firstname, 'lastname': session.lastname, 'plan': session.plan, 'logged': true, 'signed_up_at': session.created_at, });   ","version":null,"tagName":"h2"},{"title":"4- On signup​","type":1,"pageTitle":"Examples","url":"/sdk-js/examples#4--on-signup","content":" Assuming you collected identity properties for anonymous users:  &lt;script type=&quot;text/javascript&quot;&gt; (function (s,c,r,ee,b) { s['ScreebObject']=r;s[r]=s[r]||function(){(s[r].q=s[r].q||[]).push(arguments)}; b=c.createElement('script');b.type='text/javascript'; b.id=r;b.src=ee;b.async=1;c.getElementsByTagName(&quot;head&quot;)[0].appendChild(b); }(window,document,'$screeb','https://t.screeb.app/tag.js')); // start Screeb tag, with website ID $screeb('init', 'c796994e-f2dd-41c5-a88c-91d54fc42b0e'); // collect data about the current visitor $screeb('identity.properties', { 'plan': 'anonymous', 'visited_pricing_page': true, }); &lt;/script&gt;   Then, when the user registers, just call the alias command:  $screeb('identity.alias', 'samuel@example.com');   Previous survey responses and properties will be associated with this identity.  The next time your application is opened, just call:  $screeb('identity', 'samuel@example.com');   ","version":null,"tagName":"h2"},{"title":"5- Logout page​","type":1,"pageTitle":"Examples","url":"/sdk-js/examples#5--logout-page","content":" &lt;script type=&quot;text/javascript&quot;&gt; (function (s,c,r,ee,b) { s['ScreebObject']=r;s[r]=s[r]||function(){(s[r].q=s[r].q||[]).push(arguments)}; b=c.createElement('script');b.type='text/javascript'; b.id=r;b.src=ee;b.async=1;c.getElementsByTagName(&quot;head&quot;)[0].appendChild(b); }(window,document,'$screeb','https://t.screeb.app/tag.js')); // start Screeb tag, with website ID $screeb('init', 'c796994e-f2dd-41c5-a88c-91d54fc42b0e'); // reset the current user session $screeb('identity.reset'); // contextualize the new anonymous session $screeb('identity.properties', { 'plan': 'free', 'logged': false, }); &lt;/script&gt;  ","version":null,"tagName":"h2"},{"title":"Install","type":0,"sectionRef":"#","url":"/sdk-react-native/install","content":"","keywords":"","version":null},{"title":"How to install the React-Native SDK in your app?​","type":1,"pageTitle":"Install","url":"/sdk-react-native/install#how-to-install-the-react-native-sdk-in-your-app","content":" See the example to install the last version of the Screeb SDK dependency in a React-Native app.    ","version":null,"tagName":"h2"},{"title":"Screeb SDK Usage in CI Environments​","type":1,"pageTitle":"Install","url":"/sdk-react-native/install#screeb-sdk-usage-in-ci-environments","content":" Please note that if you are utilizing a Continuous Integration (CI) system, it is advisable to deactivate the Screeb SDK during CI execution. This precaution helps prevent the creation of numerous new anonymous users and potential exceedance of your MTU limit.  ","version":null,"tagName":"h2"},{"title":"Technical requirements​","type":1,"pageTitle":"Install","url":"/sdk-react-native/install#technical-requirements","content":" The Screeb SDK is configured to work with Android SDK version 19 minimum and iOS version 11.0 minimum.  The Swift version is &gt;= v5.5.2 and XCode version &gt;= 13.2.1.  The size of the SDK is approximately 27 KB on Android and approximately 198 KB on iOS.  ","version":null,"tagName":"h2"},{"title":"How to configure the React-Native SDK in your app?​","type":1,"pageTitle":"Install","url":"/sdk-react-native/install#how-to-configure-the-react-native-sdk-in-your-app","content":" First, log in to the Screeb application, then create your first survey.  ","version":null,"tagName":"h2"},{"title":"Add Screeb as a dependency​","type":1,"pageTitle":"Install","url":"/sdk-react-native/install#add-screeb-as-a-dependency","content":" npm install @screeb/react-native   ","version":null,"tagName":"h3"},{"title":"Android​","type":1,"pageTitle":"Install","url":"/sdk-react-native/install#android","content":" The Android SDK needs the permissions INTERNET to work well.  &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;   The SDK also need theses permissions if you want to use the Screeb Audio/Video feature.  &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.MICROPHONE&quot; /&gt; &lt;uses-feature android:name=&quot;android.hardware.camera&quot; android:required=&quot;true&quot;/&gt; &lt;uses-feature android:name=&quot;android.hardware.camera.autofocus&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.RECORD_AUDIO&quot; /&gt; &lt;uses-permission android:name=&quot;android.permission.MODIFY_AUDIO_SETTINGS&quot; /&gt;   ","version":null,"tagName":"h3"},{"title":"iOS​","type":1,"pageTitle":"Install","url":"/sdk-react-native/install#ios","content":" The SDK need theses permissions if you want to use the Screeb Audio/Video feature.  &lt;key&gt;NSCameraUsageDescription&lt;/key&gt; &lt;string&gt;This app needs access to the camera to take photos.&lt;/string&gt; &lt;key&gt;NSMicrophoneUsageDescription&lt;/key&gt; &lt;string&gt;This app needs access to microphone to record audio.&lt;/string&gt; &lt;key&gt;UISupportedInterfaceOrientations&lt;/key&gt;   Update​  When upgrading the React-Native SDK version, you may need to run in ios/ directory:  cd ios/ pod update Screeb   ","version":null,"tagName":"h3"},{"title":"Import Screeb SDK into your package​","type":1,"pageTitle":"Install","url":"/sdk-react-native/install#import-screeb-sdk-into-your-package","content":" import { initSdk, trackScreen, trackEvent, setProperties, setIdentity } from &quot;@screeb/react-native&quot;;   ","version":null,"tagName":"h3"},{"title":"Setup the SDK​","type":1,"pageTitle":"Install","url":"/sdk-react-native/install#setup-the-sdk","content":" // Init the sdk at app start (useEffect hook used here, but componentDidMount is fine) React.useEffect(() =&gt; { initSdk( &quot;&lt;android-channel-id&gt;&quot;, &quot;&lt;ios-channel-id&gt;&quot;, &quot;&lt;user-id&gt;&quot;, { 'example-prop1': false, 'example-prop2': 29, 'example-prop3' : 'iPhone 13', } ); }, []);   ","version":null,"tagName":"h3"},{"title":"Next steps​","type":1,"pageTitle":"Install","url":"/sdk-react-native/install#next-steps","content":" ","version":null,"tagName":"h2"},{"title":"1- Identify visitors​","type":1,"pageTitle":"Install","url":"/sdk-react-native/install#1--identify-visitors","content":" See here.  ","version":null,"tagName":"h3"},{"title":"2- Event tracking​","type":1,"pageTitle":"Install","url":"/sdk-react-native/install#2--event-tracking","content":" See here.  ","version":null,"tagName":"h3"},{"title":"3- Screen tracking​","type":1,"pageTitle":"Install","url":"/sdk-react-native/install#3--screen-tracking","content":" See here.  ","version":null,"tagName":"h3"},{"title":"4- Start the survey programmatically​","type":1,"pageTitle":"Install","url":"/sdk-react-native/install#4--start-the-survey-programmatically","content":" See here. ","version":null,"tagName":"h3"},{"title":"Hooks","type":0,"sectionRef":"#","url":"/sdk-react-native/react-native-hooks","content":"","keywords":"","version":null},{"title":"Set hooks​","type":1,"pageTitle":"Hooks","url":"/sdk-react-native/react-native-hooks#set-hooks","content":" You can define custom hooks to be executed on various events.  Thanks to this you will be able to interact with your application when a survey appears, or execute some custom code when a survey is submitted.  You can define hooks on initSdk() and startSurvey() commands. Hooks are all optional.  Available hooks are:  onSurveyShowed: called when a survey is showedonSurveyStarted: called when a survey is startedonQuestionReplied: called when a question is repliedonSurveyCompleted: called when a survey is completedonSurveyHidden: called when a survey is hiddenonReady: called when the SDK is ready (Only available on initSdk())  ","version":null,"tagName":"h2"},{"title":"Set hooks on SDK init​","type":1,"pageTitle":"Hooks","url":"/sdk-react-native/react-native-hooks#set-hooks-on-sdk-init","content":" initSdk( &quot;&lt;android-channel-id&gt;&quot;, &quot;&lt;ios-channel-id&gt;&quot;, &quot;&lt;user-id&gt;&quot;, { 'isConnected': false, 'age': 29, 'product': 'iPhone 13', 'email': 'e2e@screeb.app', }, { version: &quot;1.0.0&quot;, onReady: (payload: any) =&gt; { console.log(&quot;onReady&quot;, payload); }, } );   ","version":null,"tagName":"h3"},{"title":"Set hooks on survey start​","type":1,"pageTitle":"Hooks","url":"/sdk-react-native/react-native-hooks#set-hooks-on-survey-start","content":" startSurvey( &quot;&lt;survey-id&gt;&quot;, &quot;&lt;allowMultipleResponses&gt;&quot;, &quot;&lt;properties&gt;&quot;, &quot;&lt;ignoreSurveyStatus&gt;&quot;, { version: &quot;1.0.0&quot;, onSurveyShowed: (payload: any) =&gt; { console.log(&quot;onSurveyShowed&quot;, payload); }, } );   ","version":null,"tagName":"h3"},{"title":"Payload types​","type":1,"pageTitle":"Hooks","url":"/sdk-react-native/react-native-hooks#payload-types","content":" onSurveyShowed: { channel: { id: string, type: &quot;android&quot; | &quot;ios&quot; }, survey: { id: string, survey_position: &quot;center-left&quot; | &quot;center-center&quot; | &quot;center-right&quot; | &quot;bottom-left&quot; | &quot;bottom-center&quot; | &quot;bottom-right&quot;, survey_size: 25 | 50 | 75 | 100 | 125 | 150, survey_format: &quot;conversational&quot; | &quot;cards&quot;, }, response: { id: string, items: { question: { id: string; title: string; type: &quot;text&quot; | &quot;video&quot;; url: string; }; answer: { fields: { type: &quot;string&quot; | &quot;number&quot; | &quot;boolean&quot; | &quot;none&quot; | &quot;time&quot; | &quot;url&quot;; }, text: string; number: number; boolean: boolean; time: Date; url: string; }[] | undefined; replied_at: Date | undefined; }[]; }, user: { anonymous_id: string, user_id: string, } } onSurveyStarted: { channel: { id: string, type: &quot;android&quot; | &quot;ios&quot; }, survey: { id: string, survey_position: &quot;center-left&quot; | &quot;center-center&quot; | &quot;center-right&quot; | &quot;bottom-left&quot; | &quot;bottom-center&quot; | &quot;bottom-right&quot;, survey_size: 25 | 50 | 75 | 100 | 125 | 150, survey_format: &quot;conversational&quot; | &quot;cards&quot;, }, response: { id: string, }, user: { anonymous_id: string, user_id: string, } } onQuestionReplied: { channel: { id: string, type: &quot;android&quot; | &quot;ios&quot; }, survey: { id: string, survey_position: &quot;center-left&quot; | &quot;center-center&quot; | &quot;center-right&quot; | &quot;bottom-left&quot; | &quot;bottom-center&quot; | &quot;bottom-right&quot;, survey_size: 25 | 50 | 75 | 100 | 125 | 150, survey_format: &quot;conversational&quot; | &quot;cards&quot;, }, response: { id: string, status: &quot;started&quot; | &quot;ended&quot; | &quot;closed&quot; | &quot;interrupted&quot; question: { id: string; title: string; type: &quot;text&quot; | &quot;video&quot;; url: string; }; answer: { fields: { type: &quot;string&quot; | &quot;number&quot; | &quot;boolean&quot; | &quot;none&quot; | &quot;time&quot; | &quot;url&quot;; }, text: string; number: number; boolean: boolean; time: Date; url: string; }; items: { question: { id: string; title: string; type: &quot;text&quot; | &quot;video&quot;; url: string; }; answer: { fields: { type: &quot;string&quot; | &quot;number&quot; | &quot;boolean&quot; | &quot;none&quot; | &quot;time&quot; | &quot;url&quot;; }, text: string; number: number; boolean: boolean; time: Date; url: string; }[] | undefined; replied_at: Date | undefined; }[]; }, user: { anonymous_id: string, user_id: string, } } onSurveyCompleted: { channel: { id: string, type: &quot;android&quot; | &quot;ios&quot; }, survey: { id: string, survey_position: &quot;center-left&quot; | &quot;center-center&quot; | &quot;center-right&quot; | &quot;bottom-left&quot; | &quot;bottom-center&quot; | &quot;bottom-right&quot;, survey_size: 25 | 50 | 75 | 100 | 125 | 150, survey_format: &quot;conversational&quot; | &quot;cards&quot;, }, response: { id: string, items: { question: { id: string; title: string; type: &quot;text&quot; | &quot;video&quot;; url: string; }; answer: { fields: { type: &quot;string&quot; | &quot;number&quot; | &quot;boolean&quot; | &quot;none&quot; | &quot;time&quot; | &quot;url&quot;; }, text: string; number: number; boolean: boolean; time: Date; url: string; }[] | undefined; replied_at: Date | undefined; }[]; }, user: { anonymous_id: string, user_id: string, } } onSurveyHidden: { channel: { id: string, type: &quot;android&quot; | &quot;ios&quot; }, survey: { id: string, survey_position: &quot;center-left&quot; | &quot;center-center&quot; | &quot;center-right&quot; | &quot;bottom-left&quot; | &quot;bottom-center&quot; | &quot;bottom-right&quot;, survey_size: 25 | 50 | 75 | 100 | 125 | 150, survey_format: &quot;conversational&quot; | &quot;cards&quot;, }, response: { id: string, hide_reason: &quot;started&quot; | &quot;ended&quot; | &quot;closed&quot; | &quot;interrupted&quot;, items: { question: { id: string; title: string; type: &quot;text&quot; | &quot;video&quot;; url: string; }; answer: { fields: { type: &quot;string&quot; | &quot;number&quot; | &quot;boolean&quot; | &quot;none&quot; | &quot;time&quot; | &quot;url&quot;; }, text: string; number: number; boolean: boolean; time: Date; url: string; }[] | undefined; replied_at: Date | undefined; }[]; }, user: { anonymous_id: string, user_id: string, } } onReady: { channel: { id: string, type: &quot;android&quot; | &quot;ios&quot; }, user: { anonymous_id: string, user_id: string, } }  ","version":null,"tagName":"h3"},{"title":"Hooks","type":0,"sectionRef":"#","url":"/sdk-ios/ios-hooks","content":"","keywords":"","version":null},{"title":"Set hooks​","type":1,"pageTitle":"Hooks","url":"/sdk-ios/ios-hooks#set-hooks","content":" You can define custom hooks to be executed on various events.  Thanks to this you will be able to interact with your website when a survey appears, or execute some custom code when a survey is submitted.  You can define hooks on Screeb.initSdk() and Screeb.startSurvey() commands. Hooks are all optional.  Available hooks are:  onSurveyShowed: called when a survey is showedonSurveyStarted: called when a survey is startedonQuestionReplied: called when a question is repliedonSurveyCompleted: called when a survey is completedonSurveyHidden: called when a survey is hiddenonReady: called when the SDK is ready (Only available on Screeb.initSdk())  ","version":null,"tagName":"h2"},{"title":"Set hooks on SDK init​","type":1,"pageTitle":"Hooks","url":"/sdk-ios/ios-hooks#set-hooks-on-sdk-init","content":" Screeb.initSdk( context: window?.rootViewController, channelId: &quot;&lt;ios-channel-id&gt;&quot;, identity: &quot;&lt;user-id&gt;&quot;, // optional visitorProperty: [&quot;age&quot;: AnyEncodable(12), &quot;name&quot;: AnyEncodable(&quot;JohnDoe&quot;)], // optional initOptions: InitOptions(automaticScreenDetection: true|false), // optional hooks: [&quot;version&quot;: &quot;1.0.0&quot;,&quot;onReady&quot;: {(e:Any) -&gt; () in print(&quot;Screeb sdk ready &quot; + String(describing: e))}] )   ","version":null,"tagName":"h3"},{"title":"Set hooks on survey start​","type":1,"pageTitle":"Hooks","url":"/sdk-ios/ios-hooks#set-hooks-on-survey-start","content":" Screeb.startSurvey( surveyId: &quot;&lt;ios-channel-id&gt;&quot;, allowMultipleResponses: true, hiddenFields: [ &quot;iosHidden1&quot;: AnyEncodable(&quot;hiddenField1&quot;), &quot;iosHiddenCount&quot;: AnyEncodable(75) ], hooks: [&quot;version&quot;: &quot;1.0.0&quot;,&quot;onSurveyShowed&quot;:{(e:Any) -&gt; () in print(&quot;Screeb survey showed &quot; + String(describing: e))}] )   ","version":null,"tagName":"h3"},{"title":"Payload types​","type":1,"pageTitle":"Hooks","url":"/sdk-ios/ios-hooks#payload-types","content":" onSurveyShowed: { channel: { id: string, type: &quot;ios&quot; }, survey: { id: string, survey_position: &quot;center-left&quot; | &quot;center-center&quot; | &quot;center-right&quot; | &quot;bottom-left&quot; | &quot;bottom-center&quot; | &quot;bottom-right&quot;, survey_size: 25 | 50 | 75 | 100 | 125 | 150, survey_format: &quot;conversational&quot; | &quot;cards&quot;, }, response: { id: string, items: { question: { id: string; title: string; type: &quot;text&quot; | &quot;video&quot;; url: string; }; answer: { fields: { type: &quot;string&quot; | &quot;number&quot; | &quot;boolean&quot; | &quot;none&quot; | &quot;time&quot; | &quot;url&quot;; }, text: string; number: number; boolean: boolean; time: Date; url: string; }[] | undefined; replied_at: Date | undefined; }[]; }, user: { anonymous_id: string, user_id: string, } } onSurveyStarted: { channel: { id: string, type: &quot;ios&quot; }, survey: { id: string, survey_position: &quot;center-left&quot; | &quot;center-center&quot; | &quot;center-right&quot; | &quot;bottom-left&quot; | &quot;bottom-center&quot; | &quot;bottom-right&quot;, survey_size: 25 | 50 | 75 | 100 | 125 | 150, survey_format: &quot;conversational&quot; | &quot;cards&quot;, }, response: { id: string, }, user: { anonymous_id: string, user_id: string, } } onQuestionReplied: { channel: { id: string, type: &quot;ios&quot; }, survey: { id: string, survey_position: &quot;center-left&quot; | &quot;center-center&quot; | &quot;center-right&quot; | &quot;bottom-left&quot; | &quot;bottom-center&quot; | &quot;bottom-right&quot;, survey_size: 25 | 50 | 75 | 100 | 125 | 150, survey_format: &quot;conversational&quot; | &quot;cards&quot;, }, response: { id: string, status: &quot;started&quot; | &quot;ended&quot; | &quot;closed&quot; | &quot;interrupted&quot; question: { id: string; title: string; type: &quot;text&quot; | &quot;video&quot;; url: string; }; answer: { fields: { type: &quot;string&quot; | &quot;number&quot; | &quot;boolean&quot; | &quot;none&quot; | &quot;time&quot; | &quot;url&quot;; }, text: string; number: number; boolean: boolean; time: Date; url: string; }; items: { question: { id: string; title: string; type: &quot;text&quot; | &quot;video&quot;; url: string; }; answer: { fields: { type: &quot;string&quot; | &quot;number&quot; | &quot;boolean&quot; | &quot;none&quot; | &quot;time&quot; | &quot;url&quot;; }, text: string; number: number; boolean: boolean; time: Date; url: string; }[] | undefined; replied_at: Date | undefined; }[]; }, user: { anonymous_id: string, user_id: string, } } onSurveyCompleted: { channel: { id: string, type: &quot;ios&quot; }, survey: { id: string, survey_position: &quot;center-left&quot; | &quot;center-center&quot; | &quot;center-right&quot; | &quot;bottom-left&quot; | &quot;bottom-center&quot; | &quot;bottom-right&quot;, survey_size: 25 | 50 | 75 | 100 | 125 | 150, survey_format: &quot;conversational&quot; | &quot;cards&quot;, }, response: { id: string, items: { question: { id: string; title: string; type: &quot;text&quot; | &quot;video&quot;; url: string; }; answer: { fields: { type: &quot;string&quot; | &quot;number&quot; | &quot;boolean&quot; | &quot;none&quot; | &quot;time&quot; | &quot;url&quot;; }, text: string; number: number; boolean: boolean; time: Date; url: string; }[] | undefined; replied_at: Date | undefined; }[]; }, user: { anonymous_id: string, user_id: string, } } onSurveyHidden: { channel: { id: string, type: &quot;ios&quot; }, survey: { id: string, survey_position: &quot;center-left&quot; | &quot;center-center&quot; | &quot;center-right&quot; | &quot;bottom-left&quot; | &quot;bottom-center&quot; | &quot;bottom-right&quot;, survey_size: 25 | 50 | 75 | 100 | 125 | 150, survey_format: &quot;conversational&quot; | &quot;cards&quot;, }, response: { id: string, hide_reason: &quot;started&quot; | &quot;ended&quot; | &quot;closed&quot; | &quot;interrupted&quot;, items: { question: { id: string; title: string; type: &quot;text&quot; | &quot;video&quot;; url: string; }; answer: { fields: { type: &quot;string&quot; | &quot;number&quot; | &quot;boolean&quot; | &quot;none&quot; | &quot;time&quot; | &quot;url&quot;; }, text: string; number: number; boolean: boolean; time: Date; url: string; }[] | undefined; replied_at: Date | undefined; }[]; }, user: { anonymous_id: string, user_id: string, } } onReady: { channel: { id: string, type: &quot;ios&quot; }, user: { anonymous_id: string, user_id: string, } }  ","version":null,"tagName":"h3"},{"title":"Hooks","type":0,"sectionRef":"#","url":"/sdk-js/js-hooks","content":"","keywords":"","version":null},{"title":"Set hooks​","type":1,"pageTitle":"Hooks","url":"/sdk-js/js-hooks#set-hooks","content":" You can define custom hooks to be executed on various events.  Thanks to this you will be able to interact with your website when a survey appears, or execute some custom code when a survey is submitted.  You can define hooks on init and survey.start commands. Hooks are all optional.  Available hooks are:  onSurveyShowed: called when a survey is showedonSurveyStarted: called when a survey is startedonQuestionReplied: called when a question is repliedonSurveyCompleted: called when a survey is completedonSurveyHidden: called when a survey is hiddenonAppStoreRatingTriggered: called when an App Store Rating question is triggered.onReady: called when the SDK is ready (Only available on init)  ","version":null,"tagName":"h2"},{"title":"Set hooks on widget init​","type":1,"pageTitle":"Hooks","url":"/sdk-js/js-hooks#set-hooks-on-widget-init","content":" $screeb('init', '&lt;website-id&gt;', { hooks: { version: &quot;1.0.0&quot;, onSurveyShowed: (payload) =&gt; { console.log(&quot;Survey has been showed&quot;, payload); }, onSurveyStarted: (payload) =&gt; { console.log(&quot;Survey has been started&quot;, payload); }, onQuestionReplied: (payload) =&gt; { console.log(&quot;Question has been replied&quot;, payload); }, onSurveyCompleted: (payload) =&gt; { console.log(&quot;Survey has been completed&quot;, payload); }, onSurveyHidden: (payload) =&gt; { console.log(&quot;Survey has been hidden&quot;, payload); }, onAppStoreRatingTriggered: (payload) =&gt; { console.log(&quot;App Store Rating triggered&quot;, payload); }, onReady: (payload) =&gt; { console.log(&quot;Screeb ready&quot;, payload); }, } });   ","version":null,"tagName":"h3"},{"title":"Set hooks on survey start​","type":1,"pageTitle":"Hooks","url":"/sdk-js/js-hooks#set-hooks-on-survey-start","content":" $screeb(&quot;survey.start&quot;, &quot;&lt;survey-id&gt;&quot;, { hooks: { version: &quot;1.0.0&quot;, onSurveyShowed: (payload) =&gt; { console.log(&quot;Survey has been showed&quot;, payload); }, onSurveyStarted: (payload) =&gt; { console.log(&quot;Survey has been started&quot;, payload); }, onQuestionReplied: (payload) =&gt; { console.log(&quot;Question has been replied&quot;, payload); }, onSurveyCompleted: (payload) =&gt; { console.log(&quot;Survey has been completed&quot;, payload); }, onSurveyHidden: (payload) =&gt; { console.log(&quot;Survey has been hidden&quot;, payload); }, onAppStoreRatingTriggered: (payload) =&gt; { console.log(&quot;App Store Rating triggered&quot;, payload); }, }, });   ","version":null,"tagName":"h3"},{"title":"Payload types​","type":1,"pageTitle":"Hooks","url":"/sdk-js/js-hooks#payload-types","content":" onSurveyShowed: { channel: { id: string, type: &quot;widget&quot; }, survey: { id: string, survey_position: &quot;center-left&quot; | &quot;center-center&quot; | &quot;center-right&quot; | &quot;bottom-left&quot; | &quot;bottom-center&quot; | &quot;bottom-right&quot;, survey_size: 25 | 50 | 75 | 100 | 125 | 150, survey_format: &quot;conversational&quot; | &quot;cards&quot;, }, response: { id: string, items: { question: { id: string; title: string; type: &quot;text&quot; | &quot;video&quot;; url: string; }; answer: { fields: { type: &quot;string&quot; | &quot;number&quot; | &quot;boolean&quot; | &quot;none&quot; | &quot;time&quot; | &quot;url&quot;; }, text: string; number: number; boolean: boolean; time: Date; url: string; }[] | undefined; replied_at: Date | undefined; }[]; }, user: { anonymous_id: string, user_id: string, } } onSurveyStarted: { channel: { id: string, type: &quot;widget&quot; }, survey: { id: string, survey_position: &quot;center-left&quot; | &quot;center-center&quot; | &quot;center-right&quot; | &quot;bottom-left&quot; | &quot;bottom-center&quot; | &quot;bottom-right&quot;, survey_size: 25 | 50 | 75 | 100 | 125 | 150, survey_format: &quot;conversational&quot; | &quot;cards&quot;, }, response: { id: string, }, user: { anonymous_id: string, user_id: string, } } onQuestionReplied: { channel: { id: string, type: &quot;widget&quot; }, survey: { id: string, survey_position: &quot;center-left&quot; | &quot;center-center&quot; | &quot;center-right&quot; | &quot;bottom-left&quot; | &quot;bottom-center&quot; | &quot;bottom-right&quot;, survey_size: 25 | 50 | 75 | 100 | 125 | 150, survey_format: &quot;conversational&quot; | &quot;cards&quot;, }, response: { id: string, status: &quot;started&quot; | &quot;ended&quot; | &quot;closed&quot; | &quot;interrupted&quot; question: { id: string; title: string; type: &quot;text&quot; | &quot;video&quot;; url: string; }; answer: { fields: { type: &quot;string&quot; | &quot;number&quot; | &quot;boolean&quot; | &quot;none&quot; | &quot;time&quot; | &quot;url&quot;; }, text: string; number: number; boolean: boolean; time: Date; url: string; }; items: { question: { id: string; title: string; type: &quot;text&quot; | &quot;video&quot;; url: string; }; answer: { fields: { type: &quot;string&quot; | &quot;number&quot; | &quot;boolean&quot; | &quot;none&quot; | &quot;time&quot; | &quot;url&quot;; }, text: string; number: number; boolean: boolean; time: Date; url: string; }[] | undefined; replied_at: Date | undefined; }[]; }, user: { anonymous_id: string, user_id: string, } } onSurveyCompleted: { channel: { id: string, type: &quot;widget&quot; }, survey: { id: string, survey_position: &quot;center-left&quot; | &quot;center-center&quot; | &quot;center-right&quot; | &quot;bottom-left&quot; | &quot;bottom-center&quot; | &quot;bottom-right&quot;, survey_size: 25 | 50 | 75 | 100 | 125 | 150, survey_format: &quot;conversational&quot; | &quot;cards&quot;, }, response: { id: string, items: { question: { id: string; title: string; type: &quot;text&quot; | &quot;video&quot;; url: string; }; answer: { fields: { type: &quot;string&quot; | &quot;number&quot; | &quot;boolean&quot; | &quot;none&quot; | &quot;time&quot; | &quot;url&quot;; }, text: string; number: number; boolean: boolean; time: Date; url: string; }[] | undefined; replied_at: Date | undefined; }[]; }, user: { anonymous_id: string, user_id: string, } } onSurveyHidden: { channel: { id: string, type: &quot;widget&quot; }, survey: { id: string, survey_position: &quot;center-left&quot; | &quot;center-center&quot; | &quot;center-right&quot; | &quot;bottom-left&quot; | &quot;bottom-center&quot; | &quot;bottom-right&quot;, survey_size: 25 | 50 | 75 | 100 | 125 | 150, survey_format: &quot;conversational&quot; | &quot;cards&quot;, }, response: { id: string, hide_reason: &quot;started&quot; | &quot;ended&quot; | &quot;closed&quot; | &quot;interrupted&quot;, items: { question: { id: string; title: string; type: &quot;text&quot; | &quot;video&quot;; url: string; }; answer: { fields: { type: &quot;string&quot; | &quot;number&quot; | &quot;boolean&quot; | &quot;none&quot; | &quot;time&quot; | &quot;url&quot;; }, text: string; number: number; boolean: boolean; time: Date; url: string; }[] | undefined; replied_at: Date | undefined; }[]; }, user: { anonymous_id: string, user_id: string, } } onAppStoreRatingTriggered: { channel: { id: string, type: &quot;widget&quot; }, user: { anonymous_id: string, user_id: string, } } onReady: { channel: { id: string, type: &quot;widget&quot; }, user: { anonymous_id: string, user_id: string, } }  ","version":null,"tagName":"h3"}],"options":{"excludeRoutes":["sdk-js/feature-flagging","sdk-js/device-tracking","api-and-connectors/response-api"],"disableVersioning":true,"id":"default"}}