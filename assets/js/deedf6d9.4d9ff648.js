"use strict";(self.webpackChunkscreeb_docs=self.webpackChunkscreeb_docs||[]).push([[9364],{5539:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var s=n(4848),r=n(8453);const o={sidebar_class_name:"hidden"},a="Cloudflare Worker",c={id:"cloudflare-worker",title:"Cloudflare Worker",description:"To add the script tag to a third-party app, by proxying website through Cloudflare, create a worker+route, with the following code:",source:"@site/docs/sdk-js/cloudflare-worker.md",sourceDirName:".",slug:"/cloudflare-worker",permalink:"/sdk-js/cloudflare-worker",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{sidebar_class_name:"hidden"},sidebar:"docSidebar",previous:{title:"Troubleshooting",permalink:"/sdk-js/troubleshooting"},next:{title:"Device tracking",permalink:"/sdk-js/device-tracking"}},i={},d=[];function p(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"cloudflare-worker",children:"Cloudflare Worker"}),"\n",(0,s.jsx)(t.p,{children:"To add the script tag to a third-party app, by proxying website through Cloudflare, create a worker+route, with the following code:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"const SCREEB_CHANNEL_ID = \"<REPLACE-ME>\";\n\nexport default {\n    async fetch(request, env) {\n        /**\n         * Response properties are immutable. To change them, construct a new\n         * Response and pass modified status or statusText in the ResponseInit\n         * object. Response headers can be modified through the headers `set` method.\n         */\n        const originalResponse = await fetch(request);\n\n        const screebToken = this.getScreebToken(env, request.url);\n    \n        // You might need to add some existing values here.\n        // See https://help.screeb.app/en/articles/5046665-using-screeb-with-content-security-policy\n        const csp = `default-src https: 'unsafe-eval' 'unsafe-inline' https://*.screeb.app wss://*.screeb.app; object-src 'self'; report-uri /csp-violation-report; frame-ancestors 'self' https://admin.example.com https://vip.example.com; prefetch-src https://*.screeb.app; font-src blob:`;\n\n        // Change \"Content-Security-Policy\" header\n        const headers = new Headers(originalResponse.headers);    \n        headers.set('Content-Security-Policy', csp);\n\n        // Change response body by adding the Screeb script\n        const originalBody = await originalResponse.text();\n        const modifiedBody = originalBody.replace('</body>', `\n            <script type=\"text/javascript\">\n                (function (s,c,r,ee,b) {\n                s['ScreebObject']=r;s[r]=s[r]||function(){var d=arguments;return new Promise(function(a,b){(s[r].q=s[r].q||[]).push({v:1,args:d,ok:a,ko:b})})};\n                b=c.createElement('script');b.type='text/javascript';\n                b.id=r;b.src=ee;b.async=1;c.getElementsByTagName(\"head\")[0].appendChild(b);\n                }(window,document,'$screeb','https://t.screeb.app/tag.js'));\n            \n                $screeb('init', '${SCREEB_CHANNEL_ID}');\n            <\/script>\n            </body>`\n        );\n        const response = new Response(modifiedBody, {\n            status: originalResponse.status,\n            statusText: originalResponse.statusText,\n            headers: headers\n        });\n\n        return response;\n    },\n};\n"})})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>c});var s=n(6540);const r={},o=s.createContext(r);function a(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);