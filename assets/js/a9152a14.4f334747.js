"use strict";(self.webpackChunkscreeb_docs=self.webpackChunkscreeb_docs||[]).push([[4227],{905:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>d,toc:()=>l});var o=t(4848),s=t(8453);const r={sidebar_position:6},i="Hooks",d={id:"js-hooks",title:"Hooks",description:"Set hooks",source:"@site/docs/sdk-js/js-hooks.md",sourceDirName:".",slug:"/js-hooks",permalink:"/sdk-js/js-hooks",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"docSidebar",previous:{title:"Start survey programmatically",permalink:"/sdk-js/start-survey-programmatically"},next:{title:"Examples",permalink:"/sdk-js/examples"}},a={},l=[{value:"Set hooks",id:"set-hooks",level:2},{value:"Set hooks on widget init",id:"set-hooks-on-widget-init",level:3},{value:"Set hooks on survey start",id:"set-hooks-on-survey-start",level:3},{value:"Payload types",id:"payload-types",level:3}];function u(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"hooks",children:"Hooks"}),"\n",(0,o.jsx)(e.h2,{id:"set-hooks",children:"Set hooks"}),"\n",(0,o.jsx)(e.p,{children:"You can define custom hooks to be executed on various events."}),"\n",(0,o.jsx)(e.p,{children:"Thanks to this you will be able to interact with your website when a survey appears, or execute some custom code when a survey is submitted."}),"\n",(0,o.jsxs)(e.p,{children:["You can define hooks on ",(0,o.jsx)(e.code,{children:"init"})," and ",(0,o.jsx)(e.code,{children:"survey.start"})," commands. Hooks are all optional."]}),"\n",(0,o.jsx)(e.p,{children:"Available hooks are:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"onSurveyShowed"}),": called when a survey is showed"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"onSurveyStarted"}),": called when a survey is started"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"onQuestionReplied"}),": called when a question is replied"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"onSurveyCompleted"}),": called when a survey is completed"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"onSurveyHidden"}),": called when a survey is hidden"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"onAppStoreRatingTriggered"}),": called when an App Store Rating question is triggered."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"onReady"}),": called when the SDK is ready (Only available on ",(0,o.jsx)(e.code,{children:"init"}),")"]}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"set-hooks-on-widget-init",children:"Set hooks on widget init"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:'$screeb(\'init\', \'<website-id>\', {\n  hooks: {\n    version: "1.0.0",\n    onSurveyShowed: (payload) => {\n        console.log("Survey has been showed", payload);\n    },\n    onSurveyStarted: (payload) => {\n        console.log("Survey has been started", payload);\n    },\n    onQuestionReplied: (payload) => {\n        console.log("Question has been replied", payload);\n    },\n    onSurveyCompleted: (payload) => {\n        console.log("Survey has been completed", payload);\n    },\n    onSurveyHidden: (payload) => {\n        console.log("Survey has been hidden", payload);\n    },\n    onAppStoreRatingTriggered: (payload) => {\n        console.log("App Store Rating triggered", payload);\n    },\n    onReady: (payload) => {\n        console.log("Screeb ready", payload);\n    },\n  }\n});\n'})}),"\n",(0,o.jsx)(e.h3,{id:"set-hooks-on-survey-start",children:"Set hooks on survey start"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:'$screeb("survey.start", "<survey-id>", {\n  hooks: {\n    version: "1.0.0",\n    onSurveyShowed: (payload) => {\n        console.log("Survey has been showed", payload);\n    },\n    onSurveyStarted: (payload) => {\n        console.log("Survey has been started", payload);\n    },\n    onQuestionReplied: (payload) => {\n        console.log("Question has been replied", payload);\n    },\n    onSurveyCompleted: (payload) => {\n        console.log("Survey has been completed", payload);\n    },\n    onSurveyHidden: (payload) => {\n        console.log("Survey has been hidden", payload);\n    },\n    onAppStoreRatingTriggered: (payload) => {\n        console.log("App Store Rating triggered", payload);\n    },\n  },\n});\n'})}),"\n",(0,o.jsx)(e.h3,{id:"payload-types",children:"Payload types"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:'onSurveyShowed: {\n    channel: {\n        id: string,\n        type: "widget"\n    },\n    survey: {\n        id: string,\n        survey_position: "center-left" | "center-center" | "center-right" | "bottom-left" | "bottom-center" | "bottom-right",\n        survey_size: 25 | 50 | 75 | 100 | 125 | 150,\n        survey_format: "conversational" | "cards",\n    },\n    response: {\n        id: string,\n        items: {\n            question: {\n                id: string;\n                title: string;\n                type: "text" | "video";\n                url: string;\n            };\n            answer: {\n                fields: {\n                    type: "string" | "number" | "boolean" | "none" | "time" | "url";\n                },\n                text: string;\n                number: number;\n                boolean: boolean;\n                time: Date;\n                url: string;\n            }[] | undefined;\n            replied_at: Date | undefined;\n        }[];\n    },\n    user: {\n        anonymous_id: string,\n        user_id: string,\n    }\n}\n\nonSurveyStarted: {\n    channel: {\n        id: string,\n        type: "widget"\n    },\n    survey: {\n        id: string,\n        survey_position: "center-left" | "center-center" | "center-right" | "bottom-left" | "bottom-center" | "bottom-right",\n        survey_size: 25 | 50 | 75 | 100 | 125 | 150,\n        survey_format: "conversational" | "cards",\n    },\n    response: {\n        id: string,\n    },\n    user: {\n        anonymous_id: string,\n        user_id: string,\n    }\n}\n\nonQuestionReplied: {\n    channel: {\n        id: string,\n        type: "widget"\n    },\n    survey: {\n        id: string,\n        survey_position: "center-left" | "center-center" | "center-right" | "bottom-left" | "bottom-center" | "bottom-right",\n        survey_size: 25 | 50 | 75 | 100 | 125 | 150,\n        survey_format: "conversational" | "cards",\n    },\n    response: {\n        id: string,\n        status: "started" | "ended" | "closed" | "interrupted"\n        question: {\n            id: string;\n            title: string;\n            type: "text" | "video";\n            url: string;\n        };\n        answer: {\n            fields: {\n                type: "string" | "number" | "boolean" | "none" | "time" | "url";\n            },\n            text: string;\n            number: number;\n            boolean: boolean;\n            time: Date;\n            url: string;\n        };\n        items: {\n            question: {\n                id: string;\n                title: string;\n                type: "text" | "video";\n                url: string;\n            };\n            answer: {\n                fields: {\n                    type: "string" | "number" | "boolean" | "none" | "time" | "url";\n                },\n                text: string;\n                number: number;\n                boolean: boolean;\n                time: Date;\n                url: string;\n            }[] | undefined;\n            replied_at: Date | undefined;\n        }[];\n    },\n    user: {\n        anonymous_id: string,\n        user_id: string,\n    }\n}\n\nonSurveyCompleted: {\n    channel: {\n        id: string,\n        type: "widget"\n    },\n    survey: {\n        id: string,\n        survey_position: "center-left" | "center-center" | "center-right" | "bottom-left" | "bottom-center" | "bottom-right",\n        survey_size: 25 | 50 | 75 | 100 | 125 | 150,\n        survey_format: "conversational" | "cards",\n    },\n    response: {\n        id: string,\n        items: {\n            question: {\n                id: string;\n                title: string;\n                type: "text" | "video";\n                url: string;\n            };\n            answer: {\n                fields: {\n                    type: "string" | "number" | "boolean" | "none" | "time" | "url";\n                },\n                text: string;\n                number: number;\n                boolean: boolean;\n                time: Date;\n                url: string;\n            }[] | undefined;\n            replied_at: Date | undefined;\n        }[];\n    },\n    user: {\n        anonymous_id: string,\n        user_id: string,\n    }\n}\n\nonSurveyHidden: {\n    channel: {\n        id: string,\n        type: "widget"\n    },\n    survey: {\n        id: string,\n        survey_position: "center-left" | "center-center" | "center-right" | "bottom-left" | "bottom-center" | "bottom-right",\n        survey_size: 25 | 50 | 75 | 100 | 125 | 150,\n        survey_format: "conversational" | "cards",\n    },\n    response: {\n        id: string,\n        hide_reason: "started" | "ended" | "closed" | "interrupted",\n        items: {\n            question: {\n                id: string;\n                title: string;\n                type: "text" | "video";\n                url: string;\n            };\n            answer: {\n                fields: {\n                    type: "string" | "number" | "boolean" | "none" | "time" | "url";\n                },\n                text: string;\n                number: number;\n                boolean: boolean;\n                time: Date;\n                url: string;\n            }[] | undefined;\n            replied_at: Date | undefined;\n        }[];\n    },\n    user: {\n        anonymous_id: string,\n        user_id: string,\n    }\n}\n\nonAppStoreRatingTriggered: {\n    channel: {\n        id: string,\n        type: "widget"\n    },\n    user: {\n        anonymous_id: string,\n        user_id: string,\n    }\n}\n\nonReady: {\n    channel: {\n        id: string,\n        type: "widget"\n    },\n    user: {\n        anonymous_id: string,\n        user_id: string,\n    }\n}\n'})})]})}function c(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(u,{...n})}):u(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>d});var o=t(6540);const s={},r=o.createContext(s);function i(n){const e=o.useContext(r);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:i(n.components),o.createElement(r.Provider,{value:e},n.children)}}}]);